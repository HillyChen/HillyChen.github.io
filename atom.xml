<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草泥上的蚂蚁</title>
  <subtitle>知无不言  言无不尽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://git.oschina.net/chenxushan/chenxushan.git/"/>
  <updated>2017-05-11T16:32:28.000Z</updated>
  <id>https://git.oschina.net/chenxushan/chenxushan.git/</id>
  
  <author>
    <name>sunniberg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css学习笔记</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/22/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/22/css学习笔记/</id>
    <published>2017-04-22T06:53:00.000Z</published>
    <updated>2017-05-11T16:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要为自己的公众号开发一个小程序，所以要温习一下css样式知识，在此做个笔记也供以后便捷温习学习；</p>
<h3 id="css学习笔记"><a href="#css学习笔记" class="headerlink" title="css学习笔记"></a>css学习笔记</h3><blockquote>
<p>样式</p>
<ul>
<li>行内样式：<p>This paragraph simply takes on the browser’s default paragraph style.</p><p style="font-size: 12px; font-weight:bold; font-style:italic; color:red;">By adding inline CSS styling to this paragraph, you override the default styles.</p></li>
<li>嵌入式样式：<head>  <!-- 其他head元素（如meta、title）放在这里 -->
  <style type="text/css"><pre><code>h1 {font-size:16px;}
p {color:blue;}
</code></pre>  </style><br></head></li>
<li>链接样式：<link href="styles.css" rel="stylesheet" type="text/css"><br>@import url(css/styles2.css)</li>
</ul>
</blockquote>
<h4 id="选择符："><a href="#选择符：" class="headerlink" title="选择符："></a>选择符：</h4><ul>
<li>上下文选择符</li>
<li>特殊的上下文选择符：子选择符、紧邻同胞选择符+、一般同胞选择符~、通用选择符*、</li>
<li>ID选择符：href=”#id”定位到顶部或id那个地方</li>
<li>类选择符：多类</li>
<li>属性选择符:img[title] {border:2px solid blue;}</li>
<li>属性值选择符：img[title=”red flower”] {border:4px solid green;}</li>
</ul>
<h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><h5 id="UI（User-Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。"><a href="#UI（User-Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。" class="headerlink" title="UI（User Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。"></a>UI（User Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。</h5><ul>
<li>链接伪类<ul>
<li>Link。此时，链接就在那儿等着用户点击。</li>
<li>Visited。用户此前点击过这个链接。</li>
<li>Hover。鼠标指针正悬停在链接上。</li>
<li>Active。链接正在被点击（鼠标在元素上按下，还没有释放）。<br>p:hover {background-color:gray;}</li>
</ul>
</li>
<li>:focus伪类:e:focus{}e代表任何元素<br>input:focus {border:1px solid blue;}</li>
<li>:target伪类<br>“<a href="#more_info">More Information</a><br><h2 id="more_info">This is the information you are looking for.</h2><br>”#more_info:target {background:#eee;}”</li>
</ul>
<h5 id="结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。"><a href="#结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。" class="headerlink" title="结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。"></a>结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。</h5><ul>
<li><p>:first-child和:last-child</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ol.results li:first-child &#123;color:blue;&#125;||ol.results li:last-child &#123;color:red;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"results"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>My Fast Pony<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Steady Trotter<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Slow Ol' Nag<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>:nth-child<br>e:nth-child(n)/e:nth-child(odd)/e:nth-child(even)</p>
</li>
</ul>
<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul>
<li>::first-letter伪元素:p::first-letter {font-size:300%;}(段落首字符放大的效果，也可以用一个<span>实现)</span></li>
<li>::first-line伪元素：p::first-line {font-variant:small-caps;}<br>p::first-line {font-variant:small-caps;} (第一行以小型大写字母显示)</li>
<li><p>::before和::after伪元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"age"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">p.age::before &#123;content:"Age: ";&#125;</div><div class="line">p.age::after &#123;content:" years.";&#125;</div><div class="line">Age: 25 years.</div></pre></td></tr></table></figure>
<p>这种用法可以用在后台查询数据给前台时，进行一些渲染</p>
</li>
</ul>
<h4 id="继承-层叠-特指"><a href="#继承-层叠-特指" class="headerlink" title="继承-层叠-特指"></a>继承-层叠-特指</h4><p>在一个较大的样式表中，可能会有很多条规则都选择同一个元素的同一个属性。比如，一个带有类属性的段落，可能会被一条以标签名作选择符的规则选中并指定一种字体，而另一条以该段落的类名作选择符的规则却会给它指定另一种字体。我们知道，字体属性在任意时刻都只能应用一种设定，那此时该应用哪种字体呢？为解决类似的冲突，确定哪条规则“胜出”并最终被应用，CSS提供了三种机制：继承、层叠和特指。接下来的三节，就分别讨论这三种机制。</p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>body {font-family:helvetica, arial, sans-serif;}<br>body是所有所有元素的祖宗，所有元素都会继承它的样式，对于个别想使用自己的样式，只需自身指定即可，就如同OOP编程语言里面的类继承类似，如果子类想定义自己从父类的方法，也可重写实现自己的特性。<br>有些属性可以继承：颜色、字体、字号等<br>有些属性不能继承：边框、外边距、内边距</p>
<h5 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h5><h6 id="样式来源"><a href="#样式来源" class="headerlink" title="样式来源"></a>样式来源</h6><p>以下就是浏览器层叠各个来源样式的顺序：</p>
<ul>
<li>浏览器默认样式表</li>
<li>用户样式表</li>
<li>作者链接样式表（按照它们链接到页面的先后顺序）</li>
<li>作者嵌入样式</li>
<li>作者行内样式<br>以上样式会以冒泡交换的法则进行继承式替换。<h6 id="层叠规则"><a href="#层叠规则" class="headerlink" title="层叠规则"></a>层叠规则</h6></li>
<li>层叠规则一：找到应用给每个元素和属性的所有声明。浏览器在加载每个页面时，都会据此查到每一条CSS规则，标识出所有受到影响的HTML元素</li>
<li>层叠规则二：按照顺序和权重排序。浏览器依次检查5个来源，并设定匹配的属性。如果匹配的属性在下一个来源也有定义，则更新该属性的值，如此循环，直到检查完页面中所有标签受影响属性的全部5个来源为止。最终某个属性被设定成什么值，就用什么值来显示。声明也可以有权重。可以像下面这样为单独的声明增加权重：p {color:green !important; font-size:12pt;}空格!important分号（;）用于加重声明的权重。这条规则加重了将文本设置为绿色的权重。于是，就算层叠的下一来源给段落设定了其他颜色，最终的颜色值仍然还是绿色。</li>
<li>层叠规则三：按特指度排序，举例来说就是比如类选择符选中的规则比普通标签选择要高。<br>这里涉及到特指度的计算：I - C - E<ul>
<li>选择符中有一个ID，就在I的位置上加1；</li>
<li>选择符中有一个类，就在C的位置上加1；</li>
<li>选择符中有一个元素（标签）名，就在E的位置上加1；</li>
<li>得到一个三位数。</li>
</ul>
</li>
<li>层叠规则四：顺序决定权重。如果两条规则都影响某元素的同一个属性，而且它们的特指度也相同，则位置最靠下（或后声明）的规则胜出</li>
</ul>
<h6 id="规则声明"><a href="#规则声明" class="headerlink" title="规则声明"></a>规则声明</h6><p>css属性值主要分为三类</p>
<ul>
<li>文本值：font-weight:bold</li>
<li><p>数字值(又分为相对值和绝对值)：font-size:12px</p>
</li>
<li><p>颜色值：color:#336699</p>
<ul>
<li>十六进制颜色（#RRGGBB或#RGB):#rrggbb-十六进制以16为基数，使用数字0-9和字母a-f，共16个值。其中，a-f代表10到15。由于每种颜色用两位十六进制值表示，因此该颜色就有256（16×16）种可能的值，结果就是16 777 216（256×256×256）种组合，也就是可以表示那么多种颜色。纯红色是#ff0000，纯绿色是#00ff00，而纯蓝色是#0000ff。大多数十六进制颜色值不仔细分析可不容易猜，比如#7ca9be是深蓝绿色，我怎么知道的？ 首先我们来看每一对rgb值中的第一个值，也就是7、a、b。蓝色和绿色值相差无几，而红色值也没有那么深。有了这些信息，就可以大致猜出这个颜色了，对，是蓝绿色</li>
<li>RGB颜色值（R, G , B）</li>
<li>RGB百分比值（R%, G%, B%）</li>
<li>HSL (色相, 饱和度%, 亮度%)</li>
<li>Alpha通道：RGBA,HSLA<br><a href="http://colrd.com" target="_blank" rel="external">色彩网站</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><blockquote>
<p>页面版式主要由三个属性控制：position属性、display属性和float属性。其中，position属性控制页面上元素间的位置关系，display属性控制元素是堆叠、并排，还是根本不在页面上出现，float属性提供控制的方式，以便把元素组成成多栏布局。</p>
</blockquote>
<h3 id="理解盒模型"><a href="#理解盒模型" class="headerlink" title="理解盒模型"></a><a href="https://www.w3.org/TR/REC-CSS2/box.html" target="_blank" rel="external">理解盒模型</a></h3><ul>
<li>边框（border）。可以设置边框的宽窄、样式和颜色。</li>
<li>内边距（padding）。可以设置盒子内容区与边框的间距。</li>
<li>外边距（margin）。可以设置盒子与相邻元素的间距。</li>
</ul>
<h4 id="简写样式"><a href="#简写样式" class="headerlink" title="简写样式"></a>简写样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">margin-top</span>:<span class="number">5px</span>; <span class="attribute">margin-right</span>:<span class="number">10px</span>; <span class="attribute">margin-bottom</span>:<span class="number">12px</span>; <span class="attribute">margin-left</span>:<span class="number">8px</span>;&#125;</div><div class="line">&#123;<span class="attribute">margin</span>:<span class="number">5px</span> <span class="number">10px</span> <span class="number">12px</span> <span class="number">8px</span>;&#125;</div><div class="line">&#123;<span class="attribute">margin</span>:<span class="number">12px</span> <span class="number">10px</span> <span class="number">6px</span>;&#125;<span class="comment">/*由于没有写最后一个值（左边的值），所以左边就会使用右边的值，即10px。*/</span></div><div class="line">&#123;<span class="attribute">border</span>:<span class="number">2px</span> dashed red;&#125;<span class="comment">/*全部3个属性，全部4条边 */</span></div><div class="line">&#123;<span class="attribute">border-style</span>:dashed;&#125;<span class="comment">/*1个属性，全部4条边 */</span></div><div class="line">&#123;<span class="attribute">border-left-style</span>:dashed;&#125;<span class="comment">/*1个属性，1条边*/</span></div><div class="line">&#123;<span class="attribute">border</span>:<span class="number">4px</span> solid red;&#125;  <span class="comment">/* 先给4条边设置相同的样式 */</span>    </div><div class="line">&#123;<span class="attribute">border-left-width</span>:<span class="number">1px</span>;&#125; <span class="comment">/* 修改左边框宽度 */</span>  </div><div class="line">&#123;<span class="attribute">border-right</span>:none;&#125;     <span class="comment">/* 移除右边框 */</span></div><div class="line"><span class="comment">/*类似地，其他属性也都有这三级粒度，例如padding和border-radius等。*/</span></div></pre></td></tr></table></figure>
<h4 id="盒子边框"><a href="#盒子边框" class="headerlink" title="盒子边框"></a>盒子边框</h4><blockquote>
<p>边框（border）有3个相关属性。</p>
<ul>
<li>宽度（border-width）。可以使用thin、medium和thick等文本值，也可以使用除百分比和负值之外的任何绝对值。</li>
<li>样式（border-style）。有none、hidden、dotted、dashed、solid、double、groove、ridge、inset和outset等文本值。</li>
<li>颜色（border-color）。可以使用任意颜色值，包括RGB、HSL、十六进制颜色值和颜色关键字。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要为自己的公众号开发一个小程序，所以要温习一下css样式知识，在此做个笔记也供以后便捷温习学习；&lt;/p&gt;
&lt;h3 id=&quot;css学习笔记&quot;&gt;&lt;a href=&quot;#css学习笔记&quot; class=&quot;headerlink&quot; title=&quot;css学习笔记&quot;&gt;&lt;/a&gt;css学习笔
    
    </summary>
    
      <category term="css" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/css/"/>
    
    
      <category term="css" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>c/cpp学习笔记</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/16/c-cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/16/c-cpp学习笔记/</id>
    <published>2017-04-16T09:03:39.000Z</published>
    <updated>2017-04-16T14:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>从大学刚学习c/cpp以来，几年过去了，但是由于大学没有好好深入学习研究c/cpp以及算法，挺后悔的。所以奉劝计算机专业的学生，大学不应该过早步入各种开发的步调，而忽略c/cpp、算法、基础专业知识的学习。其实一开始，最重要的就是把基础打扎实了，编程的思维方式和动手能力很重要，如何将现实问题，通过算法建模转化为代码才是至关重要的，可以视为灵魂。<br>所以我把自己学习的过程做记录，没事的时候仔细体会，别有一番风味，每次也会有不一样的体会。</p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote>
<p>先以一段代码开始<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// create two arrays we care about</span></div><div class="line">    <span class="keyword">int</span> ages[] = &#123;<span class="number">23</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">2</span>&#125;;</div><div class="line">    <span class="keyword">char</span> *names[] = &#123;</div><div class="line">        <span class="string">"Alan"</span>, <span class="string">"Frank"</span>,</div><div class="line">        <span class="string">"Mary"</span>, <span class="string">"John"</span>, <span class="string">"Lisa"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// safely get the size of ages</span></div><div class="line">    <span class="keyword">int</span> count = <span class="keyword">sizeof</span>(ages) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="comment">// first way using indexing</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s has %d years alive.\n"</span>,</div><div class="line">                names[i], ages[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// setup the pointers to the start of the arrays</span></div><div class="line">    <span class="keyword">int</span> *cur_age = ages;</div><div class="line">    <span class="keyword">char</span> **cur_name = names;</div><div class="line">    <span class="comment">// second way using pointers</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s is %d years old.\n"</span>,</div><div class="line">                *(cur_name+i), *(cur_age+i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// third way, pointers are just arrays</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s is %d years old again.\n"</span>,</div><div class="line">                cur_name[i], cur_age[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// fourth way with pointers in a stupid complex way</span></div><div class="line">    <span class="keyword">for</span>(cur_name = names, cur_age = ages;</div><div class="line">            (cur_age - ages) &lt; count;</div><div class="line">            cur_name++, cur_age++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s lived %d years so far.\n"</span>,</div><div class="line">                *cur_name, *cur_age);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很好的诠释了指正的工作原理，首先</p>
<ul>
<li>在你的计算机中开辟一块内存。</li>
<li>将ages这个名字“指向”它的起始位置。</li>
<li>通过选取ages作为基址，并且获取位置为i的元素，来对内存块进行索引。</li>
<li>将ages+i处的元素转换成大小正确的有效的int，这样就返回了你想要的结果：下标i处的int。</li>
</ul>
<p>指针仅仅是指向计算机中的某个地址，并带有类型限定符，所以你可以通过它得到正确大小的数据，指针的用途就是让你手动对内存块进行索引，一些情况下数组并不能做到。绝大多数情况中，你可能打算使用数组，但是一些处理原始内存块的情况，是指针的用武之地。指针向你提供了原始的、直接的内存块访问途径，让你能够处理它们。<br>指针有四个最基本的操作：</p>
<ul>
<li>向OS申请一块内存，并且用指针处理它。这包括字符串，和一些你从来没见过的东西，比如结构体。</li>
<li>通过指针向函数传递大块的内存（比如很大的结构体），这样不必把全部数据都传递进去。</li>
<li>获取函数的地址用于动态调用。</li>
<li>对一块内存做复杂的搜索，比如，转换网络套接字中的字节，或者解析文<br>其实当我们在阅读别人的代码或者自己运用指正，只要把下面这几点牢记于心，就应该没问题，一步一步去拆解理解：</li>
<li>type *ptr：type类型的指针，名为ptr</li>
<li>*ptr：ptr所指向位置的值</li>
<li>*(ptr + i)：ptr所指向位置加上i）的值</li>
<li>&amp;thing：thing的地址</li>
<li>type *ptr = &amp;thing：名为ptr，type类型的指针，值设置为thing的地址</li>
<li>ptr++：自增ptr指向的位置*</li>
</ul>
</blockquote>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote>
<p>从一段代码搞起：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Person &#123;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">int</span> height;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> Person *<span class="title">Person_create</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">int</span> height, <span class="keyword">int</span> weight)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> Person *who = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Person));</div><div class="line">    assert(who != <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//使用strdup来复制字符串name，是为了确保结构体真正拥有它。strdup的行为实际上类似malloc但是它同时会将原来的字符串复制到新创建的内存。</span></div><div class="line">    who-&gt;name = strdup(name);</div><div class="line">    who-&gt;age = age;</div><div class="line">    who-&gt;height = height;</div><div class="line">    who-&gt;weight = weight;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> who;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person_destroy</span><span class="params">(<span class="keyword">struct</span> Person *who)</span></span></div><div class="line">&#123;</div><div class="line">    assert(who != <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(who-&gt;name);</div><div class="line">    <span class="built_in">free</span>(who);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person_print</span><span class="params">(<span class="keyword">struct</span> Person *who)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, who-&gt;name);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tAge: %d\n"</span>, who-&gt;age);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tHeight: %d\n"</span>, who-&gt;height);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tWeight: %d\n"</span>, who-&gt;weight);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// make two people structures</span></div><div class="line">    <span class="keyword">struct</span> Person *joe = Person_create(</div><div class="line">            <span class="string">"Joe Alex"</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">140</span>);</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> Person *frank = Person_create(</div><div class="line">            <span class="string">"Frank Blank"</span>, <span class="number">20</span>, <span class="number">72</span>, <span class="number">180</span>);</div><div class="line"></div><div class="line">    <span class="comment">// print them out and where they are in memory</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Joe is at memory location %p:\n"</span>, joe);</div><div class="line">    Person_print(joe);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Frank is at memory location %p:\n"</span>, frank);</div><div class="line">    Person_print(frank);</div><div class="line"></div><div class="line">    <span class="comment">// make everyone age 20 years and print them again</span></div><div class="line">    joe-&gt;age += <span class="number">20</span>;</div><div class="line">    joe-&gt;height -= <span class="number">2</span>;</div><div class="line">    joe-&gt;weight += <span class="number">40</span>;</div><div class="line">    Person_print(joe);</div><div class="line"></div><div class="line">    frank-&gt;age += <span class="number">20</span>;</div><div class="line">    frank-&gt;weight += <span class="number">20</span>;</div><div class="line">    Person_print(frank);</div><div class="line">    <span class="comment">// destroy them both so we clean up</span></div><div class="line">    Person_destroy(joe);</div><div class="line">    Person_destroy(frank);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>其实结构体就相当于数据库中的一行或者OOP语言中的类一样*</p>
<p>##</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从大学刚学习c/cpp以来，几年过去了，但是由于大学没有好好深入学习研究c/cpp以及算法，挺后悔的。所以奉劝计算机专业的学生，大学不应该过早步入各种开发的步调，而忽略c/cpp、算法、基础专业知识的学习。其实一开始，最重要的就是把基础打扎实了，编程的思维方式和动手能力很重
    
    </summary>
    
      <category term="c/cpp" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/c-cpp/"/>
    
    
      <category term="c/cpp" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客迁移部署到oschina(开源中国)&amp;&amp;codingNet(码市)</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/09/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%83%A8%E7%BD%B2%E5%88%B0oschina-%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-coding-%E7%A0%81%E4%BA%91/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/09/Hexo博客迁移部署到oschina-开源中国-coding-码云/</id>
    <published>2017-04-08T16:14:29.000Z</published>
    <updated>2017-04-08T16:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天突然发现github.io的pags服务挂掉了,导致博客登录不上，为了防止以后类似情况的发生，决定把博客部署到国内的一些托管平台，比如开源中国和码市。因为二者都支持项目开启pages服务，所以迁移起来很简单;</p>
<h3 id="step1、新建项目仓"><a href="#step1、新建项目仓" class="headerlink" title="step1、新建项目仓"></a>step1、新建项目仓</h3><ul>
<li>到<a href="https://git.oschina.net">开源中国</a>和<a href="https://coding.net/" target="_blank" rel="external">码市</a>申请账号登录新建项目</li>
<li><strong>在新建项目的时候，对于pages项目，项目的名称一定要跟用户名一致，不然后面当博客源码推送到仓库上的时候，访问的时候会遇到静态资源都加载失败的情况；</strong></li>
<li>把项目的pages功能开启，默认使用master分支；</li>
</ul>
<h3 id="step2、修改修改hexo配置"><a href="#step2、修改修改hexo配置" class="headerlink" title="step2、修改修改hexo配置"></a>step2、修改修改hexo配置</h3><ul>
<li><p>打开博客根目录的_config.yml文件，找到：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="comment">#url: http://hillychen.github.io</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/HillyChen/HillyChen.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>修改为(根据自己的仓库地址修改,其中增加了开源中国仓库地址和码云的仓库地址)：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: https://git.oschina.net/chenxushan/chenxushan.git</div><div class="line"><span class="comment">#url: http://hillychen.github.io</span></div><div class="line"><span class="comment">#url: https://git.coding.net/hilly/hilly.git</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  <span class="comment">#repo: https://github.com/HillyChen/HillyChen.github.io</span></div><div class="line">  repo: https://git.oschina.net/chenxushan/chenxushan.git</div><div class="line">  <span class="comment">#repo: https://git.coding.net/hilly/hilly.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>然后执行下面命令，以重新生成baidusitemap.xml。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天突然发现github.io的pags服务挂掉了,导致博客登录不上，为了防止以后类似情况的发生，决定把博客部署到国内的一些托管平台，比如开源中国和码市。因为二者都支持项目开启pages服务，所以迁移起来很简单;&lt;/p&gt;
&lt;h3 id=&quot;step1、新建项目仓&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="博客迁移" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
    
      <category term="博客迁移" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>计算机专业基础知识</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/07/计算机专业基础知识/</id>
    <published>2017-04-07T15:12:31.000Z</published>
    <updated>2017-04-09T07:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多软件开发人员在工作中都不涉及这些知识，但是对于大公司来说，要想深入技术领域产品的研发，这些知识是很重要的，所以对于打算一直走技术路线的人来说，职业生涯很有必要抽出时间进行学习。八个字：“巩固、充实、深入、探索”。下面是整理的一些思维导图。</p>
<h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><ul>
<li>计算机系统概述<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feeiqrjx0wj23g21dxnp4.jpg" alt="计算机系统概述"></li>
<li>存储器<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegg902y1gj23cf1udhdt.jpg" alt="存储器"></li>
<li>指令系统<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegga42amrj21zz2g4e81.jpg" alt="指令系统"></li>
<li>中央处理器<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggayzwbcj23q12md1kz.jpg" alt="中央处理器"></li>
<li>总线<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggbojz1qj21b51hlww2.jpg" alt="总线"></li>
<li>输入输出系统<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggckiixoj22v62dv7wh.jpg" alt="输入输出系统"></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggeide24j23cj1t3x6p.jpg" alt="进程管理"></li>
<li>处理机调度(CPU)<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggf9xs9aj229l2577wh.jpg" alt="处理机调度"></li>
<li>进程同步与互斥<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggg721b4j21sn1fek94.jpg" alt="进程同步与互斥"></li>
<li>死锁<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegggvbin4j21f71gwk8d.jpg" alt="死锁"></li>
<li>内存管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegghifc5oj220a375u0x.jpg" alt="内存管理"></li>
<li>文件管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggi6c319j22ik3r2x6p.jpg" alt="文件管理"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多
    
    </summary>
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>设计师和程序员必备：全世界最著名的 icons 网站</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/05/%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%EF%BC%9A%E5%85%A8%E4%B8%96%E7%95%8C%E6%9C%80%E8%91%97%E5%90%8D%E7%9A%84-icons-%E7%BD%91%E7%AB%99/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/05/设计师和程序员必备：全世界最著名的-icons-网站/</id>
    <published>2017-04-05T15:05:33.000Z</published>
    <updated>2017-04-05T15:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于网页开发者或者是设计师，素材收集是很重要的一个环节，特别是对于我这种有强迫症的人，做任何工作，都会提前收集很多的素材，对于一些<br>图标、图片、色彩等的设计往往会占据很多时间，所以好的素材网站或者积累是很重要的，下面就是全球一些著名的icons网站，以后会更新设计相关的其他网站收集，比如色彩；</p>
<h2 id="全世界最著名的-icons-网站"><a href="#全世界最著名的-icons-网站" class="headerlink" title="全世界最著名的 icons 网站"></a>全世界最著名的 icons 网站</h2><ul>
<li><a href="https://icons8.com" target="_blank" rel="external">icons8</a>:拥有 42,800 个免费图标，提供各个平台的基础图标与分类图标，其特色是大小和颜色随意自定义。</li>
<li><a href="https://www.iconfinder.com" target="_blank" rel="external">iconfinder</a>:哥本哈根一个团队做的 icon 专业图标网站，拥有 1563889 个图标和37058图标集，是最专业的 icon 图标网站之一。</li>
<li><a href="http://iconfont.cn" target="_blank" rel="external">iconfont</a>:国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能，是阿里妈妈 MUX 组业余时间做的的矢量图标管理、交流平台。</li>
<li><a href="http://thenounproject.com" target="_blank" rel="external">Noun Project</a>:国外三位设计师 2010 创建一个收录、并可免费使用高清符号图示的媒体库，包含25个语言版本，每天都有来自世界各地的设计师提交新 icon。</li>
<li><a href="http://www.flaticon.com" target="_blank" rel="external">Flaticon</a>:搜索海量扁平化图标，让图标搜索和转换变得非常简单和快速，并提供常用格式 SVG、PSD 源文件和 PNG 下载。</li>
<li><a href="https://iconstore.co" target="_blank" rel="external">iconstore</a>:Icon Store 提供高质量的免费的/收费的图标，包括卡通风格图标，极简主义图标，扁平化设计风格图标，手绘风格图标，像素风格图标等等，也包括各种类型主题图标，比如圣诞节主题图标，情人节主题图标，天气图标，办公室图标,动物图标，美容美发图标等等。</li>
<li><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a>:Google 官方的扁平化图标手册，收集了多达10,000+图标，包括了网页，排版，音频，商务等等主题的绝大多数图标。格式包括SVG,PNG,ICON,以及字体图标，你可以在网页中轻松引用图标。</li>
<li><a href="https://www.swifticons.com" target="_blank" rel="external">swifticons</a>:覆盖 20 个大类包含 2264 个高质量图标</li>
<li><a href="http://flat-icon-design.com" target="_blank" rel="external">flat-icon-design</a>:一个日本的免费扁平化设计图示网站，总数量大约有 500 个左右！网站提供的图示风格设计都很简约、可爱，非常适合使用于网页设计、应用程序开发或投影片报告，而且这些图示明确标示为「可以作为商业用途」，网站开放 Illustrator AI、EPS、JPEG、PNG 和 SVG 五种格式下载。</li>
<li><a href="http://fontawesome.io" target="_blank" rel="external">Font-Awesome</a>:一套专门为 Twitter Boostrap 设计的图标字体库。这套图标字体集几乎囊括了网页中可能用到的所有图标，除了包括 Twitter Boostrap 的默认图标外，还有社交网络图标、Web 应用程序图标和编辑器图标等等，可以免费用于商业项目。</li>
<li><a href="">sketch</a>:sketch 设计素材</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于网页开发者或者是设计师，素材收集是很重要的一个环节，特别是对于我这种有强迫症的人，做任何工作，都会提前收集很多的素材，对于一些&lt;br&gt;图标、图片、色彩等的设计往往会占据很多时间，所以好的素材网站或者积累是很重要的，下面就是全球一些著名的icons网站，以后会更新设计相关
    
    </summary>
    
      <category term="UI" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/UI/"/>
    
    
      <category term="UI" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>学习vue.js实现的一个小demo</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/%E5%AD%A6%E4%B9%A0vue-js%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/学习vue-js实现的一个小demo/</id>
    <published>2017-03-18T14:18:13.000Z</published>
    <updated>2017-03-18T14:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习vue.js最好的方法，当然首要就是<a href="https://cn.vuejs.org" target="_blank" rel="external">vue官方文档</a>，作为一个由中国开发者开发的一个前端框架，目前github上的start数量已经四千多，所以还是比较强悍的，我在学习的时候，边看文档，便去实现一个特定场景的功能，就是对一个表格数据进行增、删、改、查、搜索;鄙人水平有限，仅供入门者交流学习，望大神别吐槽！哈哈！<br><a href="http://hillychen.github.io/vue/html/admin.html" target="_blank" rel="external">demo,点击预览</a></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h4><h4 id="vue-js在本demo的核心代码实现"><a href="#vue-js在本demo的核心代码实现" class="headerlink" title="vue.js在本demo的核心代码实现"></a>vue.js在本demo的核心代码实现</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习vue.js最好的方法，当然首要就是&lt;a href=&quot;https://cn.vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue官方文档&lt;/a&gt;，作为一个由中国开发者开发的一个前端框架，目前github上的start数量已经四千多，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/PHP%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/PHP学习总结/</id>
    <published>2017-03-18T10:40:32.000Z</published>
    <updated>2017-03-19T15:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。</p>
<h2 id="PHP中的常用函数"><a href="#PHP中的常用函数" class="headerlink" title="PHP中的常用函数"></a>PHP中的常用函数</h2><blockquote>
<p>其实学习PHP或者Python，最终要的一点就是要熟悉一些常用库或者函数，这样在应用的时候才能游刃有余，下面总结一下常用的函数<br>查看数据类型</p>
<ul>
<li>gettype(传入一个变量) 能够获得变量的类型</li>
<li>var_dump(传入一个变量) 输出变类型和值<br>判断数据类型</li>
<li>is_int/bool/float/string/array/object/null/resource(资源)/scalar(标量)/numeric(是否为数值类型)/callable(是否为函数)<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$float = <span class="number">88.8</span>;</div><div class="line">$type = gettype($float);</div><div class="line">var_dump($float);</div><div class="line"><span class="keyword">echo</span> $type;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><blockquote>
<p>强制类型转换有三种方式：</p>
<ul>
<li>用后面的三个函数可以完成类型转换，intval()、floatval()、strval()</li>
<li>变量前加上()里面写上类型，将它转换后赋值给其他变量</li>
<li>settype(变量，类型) 直接改变量本身</li>
</ul>
</blockquote>
<h2 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><blockquote>
<p>定义 define(常量名，常量值)；defined()函数来做安全机制<br>系统的一些常量：</p>
<table>
<thead>
<tr>
<th style="text-align:left">常量明</th>
<th style="text-align:left">说明</th>
<th>常量明</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LINE</td>
<td style="text-align:left">当前所在的行</td>
<td>FILE</td>
<td style="text-align:left">当前文件在服务器的路径</td>
</tr>
<tr>
<td style="text-align:left">FUNCTIOIN</td>
<td style="text-align:left">当前函数名</td>
<td>CLASS</td>
<td style="text-align:left">当前类名</td>
</tr>
<tr>
<td style="text-align:left">METHOD</td>
<td style="text-align:left">当前成员方法名</td>
<td>PHP_OS</td>
<td style="text-align:left">PHP运行的操作系统</td>
</tr>
<tr>
<td style="text-align:left">PHP_VERSION</td>
<td style="text-align:left">当前PHP的版本</td>
<td>TRAIT</td>
<td style="text-align:left">Trait 的名字,php5.4新加</td>
</tr>
<tr>
<td style="text-align:left">DIR</td>
<td style="text-align:left">文件所在的目录</td>
<td>NAMESPACE</td>
<td style="text-align:left">当前命名空间的名称（区分大小写</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'MY_NAME'</span>,<span class="string">'PHP'</span>);</div><div class="line"><span class="keyword">echo</span> MY_NAME;</div><div class="line"><span class="comment">//下面是错误的调用方式</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'我的名字是MY_NAME'</span>;</div><div class="line"><span class="comment">//正确的调用方式该这么写</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'我的名字是'</span> . MY_NAME;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote>
<ul>
<li><p>变变量其实就是——已声明的变量前，再上变量符</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$shu = <span class="string">'biao'</span>;</div><div class="line">$biao = <span class="string">'wo'</span>;</div><div class="line">$wo = <span class="string">'test'</span>;</div><div class="line">$test = <span class="string">'sina'</span>;</div><div class="line">$sina = <span class="string">'zhongguo'</span>;</div><div class="line">$zhongguo = <span class="string">'china'</span>;</div><div class="line">$china = <span class="string">'我爱你'</span>;</div><div class="line"><span class="comment">//别运行，自己去推理一下代码。也写几个可变变量玩玩吧！</span></div><div class="line"><span class="keyword">echo</span> $$$$$shu;(输出是zhongguo)</div></pre></td></tr></table></figure>
</li>
<li><p>PHP的外部变量是PHP 在使用过程中规定好的一些变量:<br>应有场景：<br>user.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"reg.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>reg.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$_GET后面加上中括号，将username作为字符串放在中括号里面，就得到了表单里面的&lt;input type="text" name="username" /&gt; 的值</span></div><div class="line">$u = $_GET[<span class="string">'username'</span>];</div><div class="line">$u = $_POST[<span class="string">'username'</span>];</div><div class="line"><span class="keyword">echo</span> $u.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">//$_GET['pwd'] 得到表单&lt;input type="password" name="pwd" /&gt; 的值</span></div><div class="line">$passwd = $_GET[<span class="string">'pwd'</span>];</div><div class="line"><span class="keyword">echo</span> $passwd.<span class="string">'&lt;br /&gt;'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">全局变量名</th>
<th style="text-align:left">功能说明</th>
<th style="text-align:left">全局变量名</th>
<th style="text-align:left">功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$_COOKIE</td>
<td style="text-align:left">得到会话控制中cookie传值</td>
<td style="text-align:left">$_SESSION</td>
<td style="text-align:left">得到会话控制中session的值</td>
</tr>
<tr>
<td style="text-align:left">$_FILES</td>
<td style="text-align:left">得到文件上传的结果</td>
<td style="text-align:left">$_GET</td>
<td style="text-align:left">得到get传值的结果</td>
</tr>
<tr>
<td style="text-align:left">$_POST</td>
<td style="text-align:left">得到post传值的结果</td>
<td style="text-align:left">$_REQUEST</td>
<td style="text-align:left">即能得到get的传值结果，也能得到post传值的结果</td>
</tr>
</tbody>
</table>
<ul>
<li>一些常用的环境变量的键名和值对应的意思：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">键名</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_METHOD”]</td>
<td style="text-align:left">请求当前PHP页面的方法</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_URI”]</td>
<td style="text-align:left">请求的URI</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SERVER_SOFTWARE”]</td>
<td style="text-align:left">用的是哪一种服务器</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REMOTE_ADDR”]</td>
<td style="text-align:left">客户的IP地址</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SERVER_ADDR”]</td>
<td style="text-align:left">当前服务器的IP地址</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SCRIPT_FILENAME”]</td>
<td style="text-align:left">当前请求文件的路径</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“HTTP_USER_AGENT”]</td>
<td style="text-align:left">当前访问这个网址的电脑和浏览器的情况</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“HTTP_REFERER”]</td>
<td style="text-align:left">上级来源（用户从哪个地址进入当前网页的）</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_TIME”]</td>
<td style="text-align:left">当前请求时间</td>
</tr>
</tbody>
</table>
<ul>
<li>变量引用(类似于C语言指正)<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$fo = <span class="number">5</span>;</div><div class="line"><span class="comment">//注意，加上了一个&amp;符哟</span></div><div class="line">$bar = &amp;$fo;</div><div class="line">$bar = <span class="number">6</span>;</div><div class="line"><span class="comment">//$bar的结果为6</span></div><div class="line"><span class="keyword">echo</span> $bar.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line"><span class="comment">//$fo的结果为6</span></div><div class="line"><span class="keyword">echo</span> $fo.<span class="string">'&lt;br /&gt;'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$x? 真代码段:假代码段</td>
<td style="text-align:left">判断是否为真假 ? 真情况 : 假情况;</td>
</tr>
<tr>
<td style="text-align:left">``（反引号）</td>
<td style="text-align:left">反引号中间插代命令，执行系统命令，等价于shell_exec函数</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">单行抑制错误，把这一行的错误不让它显示出来了，效率低不建议使用</td>
</tr>
<tr>
<td style="text-align:left">=&gt;</td>
<td style="text-align:left">数组下标访问符</td>
</tr>
<tr>
<td style="text-align:left">-&gt;</td>
<td style="text-align:left">对象访问符</td>
</tr>
<tr>
<td style="text-align:left">instanceof</td>
<td style="text-align:left">判断某个对象是否来自某个类，如果是的返回true，如果不是返回false</td>
</tr>
</tbody>
</table>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">woziji</span><span class="params">($one,$two,$func)</span></span>&#123;</div><div class="line">        <span class="comment">//我规定：检查$func是否是函数，如果不是函数停止执行本段代码，返回false</span></div><div class="line">        <span class="keyword">if</span>(!is_callable($func))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//我把$one、$two相加，再把$one和$two传入$func这个函数中处理一次</span></div><div class="line">        <span class="comment">//$func是一个变量函数，参见变量函数这一章</span></div><div class="line">        <span class="keyword">echo</span> $one + $two + $func($one,$two);</div><div class="line">&#125;</div><div class="line"><span class="comment">//我们定义几个函数试试</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusx2</span><span class="params">( $foo , $bar)</span></span>&#123;</div><div class="line">        $result = ($foo+$bar)*<span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jian</span><span class="params">( $x , $y )</span></span>&#123;</div><div class="line">    $result = $x - $y;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用一下函数，woziji，向里面传入参数试试</span></div><div class="line"><span class="keyword">echo</span> woziji(<span class="number">20</span>,<span class="number">10</span>,<span class="string">'plusx2'</span>);</div><div class="line"><span class="comment">//将plusx2改成jian试试结果</span></div><div class="line"><span class="keyword">echo</span> woziji(<span class="number">20</span>,<span class="number">10</span>,<span class="string">'jian'</span>);</div></pre></td></tr></table></figure>
<h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">'天王盖地虎'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'小鸡炖蘑菇'</span>;</div><div class="line">&#125;</div><div class="line">$fu = <span class="string">'demo'</span>;</div><div class="line"><span class="comment">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span></div><div class="line">$fu();</div><div class="line"><span class="comment">//把$fu的值改为test字符串再试试？</span></div></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.变量函数式的匿名函数</span></div><div class="line">$greet = <span class="function"><span class="keyword">function</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> $name.<span class="string">'，你好'</span>;</div><div class="line">&#125;;</div><div class="line">$greet(<span class="string">'明天'</span>);</div><div class="line">$greet(<span class="string">'PHP学院'</span>);</div><div class="line"><span class="comment">//2.回调式的匿名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">woziji</span><span class="params">($one,$two,$func)</span></span>&#123;</div><div class="line">        <span class="comment">//我规定：检查$func是否是函数，如果不是函数停止执行本段代码，返回false</span></div><div class="line">        <span class="keyword">if</span>(!is_callable($func))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//我把$one、$two相加，再把$one和$two传入$func这个函数中处理一次</span></div><div class="line">        <span class="comment">//$func是一个变量函数，参见变量函数这一章</span></div><div class="line">        <span class="keyword">echo</span> $one + $two + $func($one,$two);</div><div class="line"></div><div class="line">&#125;</div><div class="line">woziji(<span class="number">20</span>,<span class="number">30</span>,<span class="function"><span class="keyword">function</span><span class="params">( $foo , $bar)</span></span>&#123;</div><div class="line">                $result = ($foo+$bar)*<span class="number">2</span>;</div><div class="line">                <span class="keyword">return</span> $result;</div><div class="line">            &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br /&gt;'</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">       <span class="keyword">echo</span> <span class="string">'在foo函数内部有个函数叫bar函数&lt;br /&gt;'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//现在还不能调用bar()函数，因为它还不存在</span></div><div class="line">bar();</div><div class="line">foo();</div><div class="line"><span class="comment">//现在可以调用bar()函数了，因为foo()函数的执行使得bar()函数变为已定义的函数</span></div><div class="line">bar();</div><div class="line"><span class="comment">//再调一次foo()看看是不是会报错？</span></div><div class="line">foo();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><blockquote>
<p>我们将函数体外的变量通过$GLOBALS拿到了函数体使用。所以，打破了函数外的变量不能在函数体内使用的限定。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$one = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">    $two = <span class="number">100</span>;</div><div class="line">    $result = $two + $GLOBALS[<span class="string">'one'</span>];</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//你会发现结果变成了110</span></div><div class="line"><span class="keyword">echo</span> demo();</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="使用内置函数"><a href="#使用内置函数" class="headerlink" title="使用内置函数"></a>使用内置函数</h2><blockquote>
<p>主要掌握如何使用内置函数，就是会看<a href="http://php.net/manual/en/" target="_blank" rel="external">PHP官方文档</a><br>使用函数的重点是三块：</p>
<ul>
<li>了解函数的功能，特别是常用函数的功能</li>
<li>了解函数的参数</li>
<li>了解函数的返回值<br>针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：</li>
<li>直接返回布尔型，如bool copy ()</li>
<li>带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()</li>
<li>参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。</li>
<li>带有[]的参数，表示可选项。</li>
<li>带有…的参数，表示可以传任意多个参数。</li>
<li>带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()</li>
<li>函数支持的版本你要了解</li>
</ul>
</blockquote>
<h5 id="1-bool-copy-string-source-string-dest-resource-context"><a href="#1-bool-copy-string-source-string-dest-resource-context" class="headerlink" title="1.bool copy ( string $source , string $dest [, resource $context ])"></a>1.bool copy ( string $source , string $dest [, resource $context ])</h5><blockquote>
<p>这个函数的功能为： 拷备一个文件<br>返回值为为： bool型值，就是成功返回true，失败返回false<br>参数为： 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file = <span class="string">'example.txt'</span>;</div><div class="line">$newfile = <span class="string">'example.txt.bak'</span>;</div><div class="line"><span class="keyword">if</span> (!copy($file, $newfile)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"failed to copy $file...\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="2-int-array-unshift-array-amp-array-mixed-value1-mixed-…"><a href="#2-int-array-unshift-array-amp-array-mixed-value1-mixed-…" class="headerlink" title="2.int array_unshift ( array &amp;$array , mixed $value1 [, mixed $… ] )"></a>2.int array_unshift ( array &amp;$array , mixed $value1 [, mixed $… ] )</h5><blockquote>
<p>Mixed表示任何类型的数据。<br>功能： 操作一个数组，向数组中之前插入其他类型的参数。<br>返回值： int 类型，可能就是插入成功最后的个数<br>参数： 第一个参数为&amp;符，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。第二个参数为mixed，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型。第三个数数加了中括号，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$queue = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>);</div><div class="line">array_unshift($queue, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</div><div class="line">print_r($queue);</div><div class="line"><span class="comment">// The above example will output:</span></div><div class="line"><span class="comment">// Array</span></div><div class="line"><span class="comment">// (</span></div><div class="line"><span class="comment">//     [0] =&gt; apple</span></div><div class="line"><span class="comment">//     [1] =&gt; raspberry</span></div><div class="line"><span class="comment">//     [2] =&gt; orange</span></div><div class="line"><span class="comment">//     [3] =&gt; banana</span></div><div class="line"><span class="comment">// )</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="3、bool-array-walk-array-amp-array-callable-callback-mixed-userdata-NULL"><a href="#3、bool-array-walk-array-amp-array-callable-callback-mixed-userdata-NULL" class="headerlink" title="3、bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )"></a>3、bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )</h5><p>功能：传入一个回调函数，将数组的原来的组操作，并且发生变化。<br>返回值：bool 值 也就是意味着，提示成功或者失败<br>参数：第一个参数是要操作的数组。第二个参数是callback 代表着可以传入函数或者匿名函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$fruits = <span class="keyword">array</span>(<span class="string">"d"</span> =&gt; <span class="string">"lemon"</span>, <span class="string">"a"</span> =&gt; <span class="string">"orange"</span>, <span class="string">"b"</span> =&gt; <span class="string">"banana"</span>, <span class="string">"c"</span> =&gt; <span class="string">"apple"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_alter</span><span class="params">(&amp;$item1, $key, $prefix)</span></span></div><div class="line">&#123;</div><div class="line">    $item1 = <span class="string">"$prefix: $item1"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_print</span><span class="params">($item2, $key)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"$key. $item2&lt;br /&gt;\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Before ...:\n"</span>;</div><div class="line">array_walk($fruits, <span class="string">'test_print'</span>);</div><div class="line">array_walk($fruits, <span class="string">'test_alter'</span>, <span class="string">'fruit'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"... and after:\n"</span>;</div><div class="line">array_walk($fruits, <span class="string">'test_print'</span>);</div><div class="line"><span class="comment">// The above example will output:</span></div><div class="line"><span class="comment">// Before ...:</span></div><div class="line"><span class="comment">// d. lemon</span></div><div class="line"><span class="comment">// a. orange</span></div><div class="line"><span class="comment">// b. banana</span></div><div class="line"><span class="comment">// c. apple</span></div><div class="line"><span class="comment">// ... and after:</span></div><div class="line"><span class="comment">// d. fruit: lemon</span></div><div class="line"><span class="comment">// a. fruit: orange</span></div><div class="line"><span class="comment">// b. fruit: banana</span></div><div class="line"><span class="comment">// c. fruit: apple</span></div></pre></td></tr></table></figure></p>
<h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">包含失败</th>
<th style="text-align:left">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Inlcude</td>
<td style="text-align:left">返回一条警告</td>
<td style="text-align:left">文件继续向下执行。通常用于动态包含</td>
</tr>
<tr>
<td style="text-align:left">Require</td>
<td style="text-align:left">一个致命的错</td>
<td style="text-align:left">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td>
</tr>
<tr>
<td style="text-align:left">Include_once</td>
<td style="text-align:left">返回一条警告</td>
<td style="text-align:left">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td>
</tr>
<tr>
<td style="text-align:left">Require_once</td>
<td style="text-align:left">一个致命的错</td>
<td style="text-align:left">除了原的功能一外，会做一次once检测，防止文件反复被包含</td>
</tr>
</tbody>
</table>
<h2 id="日期常用函数"><a href="#日期常用函数" class="headerlink" title="日期常用函数"></a>日期常用函数</h2><blockquote>
<p>在正式学习日期函数前大家要了解几个概念:</p>
<ul>
<li>时区:1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。在中国采用首都北京所在地东八区的时间为全国统一使用时间。</li>
<li>世界时:如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</li>
<li>unix时间戳:从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。<br>时间函数有：</li>
<li>设置时区：<ul>
<li>date_default_timezone_get()</li>
<li>date_default_timezone_set()<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一下时区常量，以后你可以放到配置文件里</span></div><div class="line">define(<span class="string">'TIME_ZONE'</span>,<span class="string">'Asia/shanghai'</span>);</div><div class="line"><span class="comment">//执行函数</span></div><div class="line">date_default_timezone_set(TIME_ZONE);</div><div class="line"><span class="keyword">echo</span> date_default_timezone_get ();</div><div class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>time()获取当前的unix时间戳:time()获取当前的unix时间戳</li>
<li><p>getdate获取当前系统时间</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$mytime= getdate()；    </div><div class="line">print_r( $mytime)；</div><div class="line"><span class="comment">// Array</span></div><div class="line"><span class="comment">// (</span></div><div class="line"><span class="comment">//     [seconds] =&gt; 1            //秒</span></div><div class="line"><span class="comment">//     [minutes] =&gt; 10            //分钟</span></div><div class="line"><span class="comment">//     [hours] =&gt; 17            //小时</span></div><div class="line"><span class="comment">//     [mday] =&gt; 18            //日</span></div><div class="line"><span class="comment">//     [wday] =&gt; 0            //星期中的第几天</span></div><div class="line"><span class="comment">//     [mon] =&gt; 1            //月</span></div><div class="line"><span class="comment">//     [year] =&gt; 2015            //年</span></div><div class="line"><span class="comment">//     [yday] =&gt; 17            //年中的第几天</span></div><div class="line"><span class="comment">//     [weekday] =&gt; Sunday        //星期</span></div><div class="line"><span class="comment">//     [month] =&gt; January        //月份</span></div><div class="line"><span class="comment">//     [0] =&gt; 1421597401        //时间戳</span></div><div class="line"><span class="comment">// )</span></div><div class="line">$mytime = getdate();</div><div class="line"><span class="keyword">echo</span> <span class="string">"年 :"</span>.$mytime[<span class="string">'year'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"月 :"</span>.$mytime[<span class="string">'mon'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"日 :"</span>.$mytime[<span class="string">'mday'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"时 :"</span>.$mytime[<span class="string">'hours'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"分 :"</span>.$mytime[<span class="string">'minutes'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"秒 :"</span>.$mytime[<span class="string">'seconds'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"一个小时中的第几钟 :"</span>.$mytime[<span class="string">'minutes'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"这是一分钟的第几秒 :"</span>.$mytime[<span class="string">'seconds'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"星期名称 :"</span>.$mytime[<span class="string">'weekday'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"月份名称 :"</span>.$mytime[<span class="string">'month'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"时间戳   :"</span>.$mytime[<span class="number">0</span>].<span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>日期验证函数:bool checkdate ( int $month , int $day , int $year )</p>
</li>
<li>mktime()函数可以对一个日期和时间获得一个本地化时间戳:int mktime (int $hour [, int $minute [, int $second [, int $month [, int $day [. int$year [, int $.is_dstl.l } ] ] 31 )</li>
<li>将英文文本的日期时间描述解析为 Unix 时间戳:int strtotime ( string $time [, int $now = time() ] )</li>
<li>程序执行时间检测,microtime()这个函数，能够返回当前 Unix 时间戳和微秒数:mixed microtime ([ bool $get_as_float ] )</li>
</ul>
<h2 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a><a href="http://php.net/manual/zh/book.strings.php" target="_blank" rel="external">字符串常用函数</a></h2><p>声明：</p>
<blockquote>
<p>内容参考：<a href="http://www.kancloud.cn/phpxy/phpbook/33191" target="_blank" rel="external">《7天学会PHP》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。&lt;/p&gt;
&lt;h2 id=&quot;PHP中的常用函数&quot;&gt;&lt;a href=&quot;#PHP中的常用函数&quot; class=&quot;headerlink&quot; title=&quot;PHP中的常
    
    </summary>
    
      <category term="PHP" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>算法学习01</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A001/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/算法学习01/</id>
    <published>2017-03-12T14:08:09.000Z</published>
    <updated>2017-03-12T14:38:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="algorithm" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/javascript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/javascript学习总结/</id>
    <published>2017-03-12T14:06:51.000Z</published>
    <updated>2017-03-16T12:56:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="javascript" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Git总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Git%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Git总结/</id>
    <published>2017-03-12T14:06:27.000Z</published>
    <updated>2017-03-12T14:38:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="git" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/git/"/>
    
    
      <category term="git" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Mysql%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Mysql学习总结/</id>
    <published>2017-03-12T14:05:44.000Z</published>
    <updated>2017-05-13T16:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<ul>
<li>MySQL 是一个关系数据库系统，支持 SQL 查询语言。</li>
<li>MySQL 可以是免费的，你不需要为它付费。</li>
<li>MySQL 系统的速度非常快，同样它的性能也是十分优良的。</li>
<li>MySQL 是一个管理简捷的数据库，它没有庞大而臃肿的可视化管理工具。</li>
</ul>
</blockquote>
<h3 id="mysql基础命令"><a href="#mysql基础命令" class="headerlink" title="mysql基础命令"></a>mysql基础命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> tablename;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">databases</span>;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">tables</span>;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">columns</span> <span class="keyword">from</span> tablename;<span class="comment">--返回数据表的各个列及属性</span></div><div class="line"><span class="keyword">DESCRIBE</span> tablename;<span class="comment">--等价于上一句</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span>;<span class="comment">--用于显示广泛的服务器状态信息;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>,<span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span><span class="comment">--分别用来显示创建特定数据库或表的MySQL语句;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>;<span class="comment">--用来显示授予用户(所有用户或特定用户)的安全权限;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">ERRORS</span>,<span class="keyword">SHOW</span> <span class="keyword">WARNINGS</span>;<span class="comment">--用来显示服务器错误或警告消息</span></div><div class="line"><span class="comment">--进一步了解SHOW 请在mysql命令行实用程序中，执行命令 HELP SHOW;显示允许的SHOW语句。</span></div><div class="line"><span class="comment">-- 检索</span></div><div class="line"><span class="keyword">SELECT</span> colum_name <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="comment">--检索多个列</span></div><div class="line"><span class="keyword">SELECT</span> colum1,colum2,colum3 <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="comment">--检索多个列</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id <span class="keyword">FROM</span> tablename;<span class="comment">--返回不同(唯一)的vend_id行</span></div><div class="line"><span class="comment">--检索指定行</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">colum</span> <span class="keyword">FROM</span> tablename <span class="keyword">LIMIT</span> <span class="number">5</span>;<span class="comment">--LIMIT 5指示MySQL返回 不多于5行</span></div><div class="line"><span class="comment">--为得出下一个5行，可指定要检索的开始行和行数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">colum</span> <span class="keyword">FROM</span> tablename <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">5</span>;</div><div class="line"><span class="comment">--使用完全限定的表名</span></div><div class="line"><span class="keyword">SELECT</span> tablename.column <span class="keyword">FROM</span> databse.tablename;<span class="comment">--在有些场景的时候，是需要这样的，多表查询的时候;</span></div></pre></td></tr></table></figure>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="01创建一个表格"><a href="#01创建一个表格" class="headerlink" title="01创建一个表格"></a>01创建一个表格</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher</div><div class="line">(</div><div class="line"><span class="keyword">id</span> TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">tele <span class="built_in">NUMERIC</span>(<span class="number">8</span>),</div><div class="line">sex ENUM(<span class="string">"F"</span>,<span class="string">"M"</span>) <span class="keyword">DEFAULT</span> <span class="string">"M"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>由上面这个例子可以知道，创建列类型的语法是: col_name col_type [col_attributes][general_attributes]</p>
<ul>
<li>col_name 列的名字</li>
<li>col_type 列类型，控制存储在列中的数据类型</li>
<li>col_attributes 专用属性，只能应用于制定列，例如，我们还不知道的 BINARY。 如果你使用专用属性，必须在列的类型之后，列的通用属性之前。</li>
<li>general_attributes 通用属性，可以应用在出少数列的任意列，例如上面提到了 NULL、 NOT NULL、和 DEFAULT。</li>
<li>MySQL 的数字列类型<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fdp6efjbxmj20qm0k841v.jpg" alt=""><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fdp7523ke3j20sg0o60x7.jpg" alt=""></li>
</ul>
<p>####</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;bloc
    
    </summary>
    
      <category term="Mysql" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>java学习</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Java/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Java/</id>
    <published>2017-03-12T10:00:35.000Z</published>
    <updated>2017-03-12T14:10:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/java/"/>
    
    
      <category term="java" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/hello-world/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/hello-world/</id>
    <published>2017-03-12T06:13:43.000Z</published>
    <updated>2017-03-12T06:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
