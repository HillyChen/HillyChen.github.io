<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草泥上的蚂蚁</title>
  <subtitle>知无不言  言无不尽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://git.oschina.net/chenxushan/chenxushan.git/"/>
  <updated>2018-01-02T08:43:42.077Z</updated>
  <id>https://git.oschina.net/chenxushan/chenxushan.git/</id>
  
  <author>
    <name>sunniberg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2018/01/02/Python%E7%AC%94%E8%AE%B0/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2018/01/02/Python笔记/</id>
    <published>2018-01-02T06:17:36.000Z</published>
    <updated>2018-01-02T08:43:42.077Z</updated>
    
    <content type="html"><![CDATA[<p>人生苦短，我用python</p>
<h2 id="基础数据集"><a href="#基础数据集" class="headerlink" title="基础数据集"></a>基础数据集</h2><blockquote>
<p>list,tuple,dictionary</p>
</blockquote>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">li = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>]  <span class="comment">#定义</span></div><div class="line">li_reflect = [elem*<span class="number">2</span> <span class="keyword">for</span> elem <span class="keyword">in</span> li] <span class="comment">#映射</span></div><div class="line"><span class="comment">#方法</span></div><div class="line"><span class="comment">#append,count,extend,index,insert,pop,remove,reverse,sort</span></div><div class="line"><span class="comment"># 连接list和分割字符串</span></div><div class="line">li = [<span class="string">'server=mpilgrim'</span>, <span class="string">'uid=sa'</span>, <span class="string">'database=master'</span>, <span class="string">'pwd=secret'</span>]</div><div class="line">str1 = <span class="string">';'</span>.join(li) <span class="comment"># 'server=mpilgrim;uid=sa;database=master;pwd=secret'</span></div><div class="line">str2 = str1.split(<span class="string">";"</span>) <span class="comment"># ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']</span></div><div class="line"><span class="comment"># join 和 split方法是逆用的过程</span></div></pre></td></tr></table></figure>
<h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><h3 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">params = &#123;<span class="string">"server"</span>:<span class="string">"mpilgrim"</span>, <span class="string">"database"</span>:<span class="string">"master"</span>, <span class="string">"uid"</span>:<span class="string">"sa"</span>, <span class="string">"pwd"</span>:<span class="string">"secret"</span>&#125; <span class="comment"># 定义</span></div><div class="line">params.values() <span class="comment"># ['mpilgrim', 'sa', 'master', 'secret']</span></div><div class="line">params.items()  <span class="comment"># [('server', 'mpilgrim'), ('uid', 'sa'), ('database', 'master'), ('pwd', 'secret')]</span></div><div class="line">[<span class="string">"%s=%s"</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()] <span class="comment"># ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']</span></div><div class="line"><span class="comment"># 方法</span></div><div class="line"><span class="comment">#clear,copy,fromkeys,get,values,has_key,items,iteritems,iterkeys,itervalues,keys,pop,popitem,setdefault,update,viewitems,viewvalues,viewkeys</span></div></pre></td></tr></table></figure>
<h2 id="综合例子"><a href="#综合例子" class="headerlink" title="综合例子"></a>综合例子</h2><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildConnectionString</span><span class="params">(params)</span>:</span></div><div class="line">    <span class="string">"""Build a connection string from a dictionary of parameters.</span></div><div class="line">    Returns string."""</div><div class="line">    <span class="keyword">return</span> <span class="string">";"</span>.join([<span class="string">"%s=%s"</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()])</div><div class="line">  <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:   <span class="comment"># 这里的写法目的是：允许这个程序在自己独立运行时做些有用的事情，同时又</span></div><div class="line"><span class="comment">#不妨碍作为其它程序的模块使用</span></div><div class="line">    myParams = &#123;<span class="string">"server"</span>:<span class="string">"mpilgrim"</span>, \</div><div class="line">    <span class="string">"database"</span>:<span class="string">"master"</span>, \</div><div class="line">    <span class="string">"uid"</span>:<span class="string">"sa"</span>, \</div><div class="line">    <span class="string">"pwd"</span>:<span class="string">"secret"</span> \</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">print</span> buildConnectionString(myParams)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生苦短，我用python&lt;/p&gt;
&lt;h2 id=&quot;基础数据集&quot;&gt;&lt;a href=&quot;#基础数据集&quot; class=&quot;headerlink&quot; title=&quot;基础数据集&quot;&gt;&lt;/a&gt;基础数据集&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;list,tuple,dictionary&lt;/p
    
    </summary>
    
    
      <category term="Python" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/09/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/09/24/计算机网络/</id>
    <published>2017-09-24T13:28:54.000Z</published>
    <updated>2017-09-24T14:18:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多软件开发人员在工作中都不涉及这些知识，但是对于大公司来说，要想深入技术领域产品的研发，这些知识是很重要的，所以对于打算一直走技术路线的人来说，职业生涯很有必要抽出时间进行学习。八个字：“巩固、充实、深入、探索”。下面是整理的一些思维导图。</p>
<h3 id="计算机网络体系"><a href="#计算机网络体系" class="headerlink" title="计算机网络体系"></a>计算机网络体系</h3><p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzlii841j22ju27ce81.jpg" alt="计算机网络体系"></p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzj4i8j0j22mk3e5b2a.jpg" alt="物理层"></p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzgi56igj22m93tau0z.jpg" alt="数据链路层"></p>
<h3 id="重点知识图解"><a href="#重点知识图解" class="headerlink" title="重点知识图解"></a>重点知识图解</h3><p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs1c9vtj20u00mi76g.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs0urf5j20i80a50t3.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs0vm3zj20h606wdgl.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs1d3t8j20hj0aw750.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs0xgloj20f405z0t2.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs0w1hfj20jz0dvjsh.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjuzs0u5l1j20d7063jrm.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3fchoj20du07k0t1.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3d0bwj20dw0afglt.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3iijkj20h806r0su.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3iex5j209l06rt8w.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3fypdj20iw0cj757.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3d20sj20dm071q34.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3fteoj20ki0bj0tf.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fjv0f3gusdj20hw0dcwfl.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多
    
    </summary>
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>sketch学习笔记以及设计相关知识积累</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/05/29/sketch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BB%A5%E5%8F%8A%E8%AE%BE%E8%AE%A1%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/05/29/sketch学习笔记以及设计相关知识积累/</id>
    <published>2017-05-29T14:35:17.000Z</published>
    <updated>2017-06-10T14:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>sketch是设计师眼中一款很牛逼的设计软件，和PS的一个区别就是sketch是矢量图的设计软件<br>sketch学习网站</p>
<ul>
<li><a href="http://sketch.im" target="_blank" rel="external">sketch.im</a></li>
<li><a href="http://www.sketchchina.com" target="_blank" rel="external">skecth中国社区</a></li>
<li>to add ….</li>
</ul>
<h3 id="sketch插件"><a href="#sketch插件" class="headerlink" title="sketch插件"></a>sketch插件</h3><blockquote>
<p>安装的三种方法：</p>
<ul>
<li>sketch toolbox</li>
<li>github下载插件项目，直接双击压缩包里面的.sketchplugin的插件文件</li>
<li>直接将解压缩包里面的插件文件拷贝放到Plugins路径下<br>插件：</li>
<li>Duplicator:快捷键复制插件</li>
<li>Content Generator:自动内容填充</li>
<li>Magic mirror:选中一个区域，可以将你制定的一个图片去填充选中区域，比如图片中一个手机界面，可以用钢笔描边选中，然后用另一张图片去填充图片中手机的屏幕，具体用法是把屏幕用vector工具转变成path</li>
<li>sketch Style Inventory:导入所有的设计稿的颜色、文本样式、元件</li>
<li>Material Design Color Palette Sketch Plugin:生成配色方案的插件</li>
<li><strong>sketch notebook</strong>:标注设计稿的注意事项</li>
<li>Sketch Measure: 标注尺寸</li>
</ul>
</blockquote>
<h3 id="神奇的点9图"><a href="#神奇的点9图" class="headerlink" title="神奇的点9图"></a>神奇的点9图</h3><blockquote>
<p>只针对android手机开发者设计图片时制作，例如微信聊天文字对话框会根据文字的多少，手机屏幕尺寸进行拉伸，所以点9<br>图产生了。PS也可以制作点9图具体参考如下<br><a href="http://www.sketchchina.com/read-142.html" target="_blank" rel="external">教程</a><br><a href="http://www.sketchchina.com/read-66.html" target="_blank" rel="external">制作工具/插件</a></p>
</blockquote>
<h3 id="UI实战"><a href="#UI实战" class="headerlink" title="UI实战"></a>UI实战</h3><h4 id="UI界面设计工作流程"><a href="#UI界面设计工作流程" class="headerlink" title="UI界面设计工作流程"></a>UI界面设计工作流程</h4><ul>
<li>根据原型或者交互稿设计UI界面</li>
<li>在手机上预览设计稿</li>
<li>设计稿的沟通修改和确认环节</li>
<li>根据设计稿输出高保真的demo(可选)</li>
<li>设计稿的标注</li>
<li>切图</li>
<li>开发完成后的视觉走查</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sketch是设计师眼中一款很牛逼的设计软件，和PS的一个区别就是sketch是矢量图的设计软件&lt;br&gt;sketch学习网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sketch.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ske
    
    </summary>
    
      <category term="sketch design" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/sketch-design/"/>
    
    
      <category term="sketch design" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/sketch-design/"/>
    
  </entry>
  
  <entry>
    <title>css学习笔记</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/22/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/22/css学习笔记/</id>
    <published>2017-04-22T06:53:00.000Z</published>
    <updated>2017-07-16T09:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要为自己的公众号开发一个小程序，所以要温习一下css样式知识，在此做个笔记也供以后便捷温习学习；</p>
<h3 id="css学习笔记"><a href="#css学习笔记" class="headerlink" title="css学习笔记"></a>css学习笔记</h3><blockquote>
<p>样式</p>
<ul>
<li>行内样式：<p>This paragraph simply takes on the browser’s default paragraph style.</p><p style="font-size: 12px; font-weight:bold; font-style:italic; color:red;">By adding inline CSS styling to this paragraph, you override the default styles.</p></li>
<li>嵌入式样式：<head>  <!-- 其他head元素（如meta、title）放在这里 -->
  <style type="text/css"><pre><code>h1 {font-size:16px;}
p {color:blue;}
</code></pre>  </style><br></head></li>
<li>链接样式：<link href="styles.css" rel="stylesheet" type="text/css"><br>@import url(css/styles2.css)</li>
</ul>
</blockquote>
<h4 id="选择符："><a href="#选择符：" class="headerlink" title="选择符："></a>选择符：</h4><ul>
<li>上下文选择符</li>
<li>特殊的上下文选择符：子选择符、紧邻同胞选择符+、一般同胞选择符~、通用选择符*、</li>
<li>ID选择符：href=”#id”定位到顶部或id那个地方</li>
<li>类选择符：多类</li>
<li>属性选择符:img[title] {border:2px solid blue;}</li>
<li>属性值选择符：img[title=”red flower”] {border:4px solid green;}</li>
</ul>
<h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><h5 id="UI（User-Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。"><a href="#UI（User-Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。" class="headerlink" title="UI（User Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。"></a>UI（User Interface，用户界面）伪类会在HTML元素处于某个状态时（比如鼠标指针位于链接上），为该元素应用CSS样式。</h5><ul>
<li>链接伪类<ul>
<li>Link。此时，链接就在那儿等着用户点击。</li>
<li>Visited。用户此前点击过这个链接。</li>
<li>Hover。鼠标指针正悬停在链接上。</li>
<li>Active。链接正在被点击（鼠标在元素上按下，还没有释放）。<br>p:hover {background-color:gray;}</li>
</ul>
</li>
<li>:focus伪类:e:focus{}e代表任何元素<br>input:focus {border:1px solid blue;}</li>
<li>:target伪类<br>“<a href="#more_info">More Information</a><br><h2 id="more_info">This is the information you are looking for.</h2><br>”#more_info:target {background:#eee;}”</li>
</ul>
<h5 id="结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。"><a href="#结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。" class="headerlink" title="结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。"></a>结构化伪类会在标记中存在某种结构上的关系时（如某个元素是一组元素中的第一个或最后一个），为相应元素应用CSS样式。</h5><ul>
<li><p>:first-child和:last-child</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ol.results li:first-child &#123;color:blue;&#125;||ol.results li:last-child &#123;color:red;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"results"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>My Fast Pony<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Steady Trotter<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Slow Ol' Nag<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>:nth-child<br>e:nth-child(n)/e:nth-child(odd)/e:nth-child(even)</p>
</li>
</ul>
<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><ul>
<li>::first-letter伪元素:p::first-letter {font-size:300%;}(段落首字符放大的效果，也可以用一个<span>实现)</span></li>
<li>::first-line伪元素：p::first-line {font-variant:small-caps;}<br>p::first-line {font-variant:small-caps;} (第一行以小型大写字母显示)</li>
<li><p>::before和::after伪元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"age"</span>&gt;</span>25<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">p.age::before &#123;content:"Age: ";&#125;</div><div class="line">p.age::after &#123;content:" years.";&#125;</div><div class="line">Age: 25 years.</div></pre></td></tr></table></figure>
<p>这种用法可以用在后台查询数据给前台时，进行一些渲染</p>
</li>
</ul>
<h4 id="继承-层叠-特指"><a href="#继承-层叠-特指" class="headerlink" title="继承-层叠-特指"></a>继承-层叠-特指</h4><p>在一个较大的样式表中，可能会有很多条规则都选择同一个元素的同一个属性。比如，一个带有类属性的段落，可能会被一条以标签名作选择符的规则选中并指定一种字体，而另一条以该段落的类名作选择符的规则却会给它指定另一种字体。我们知道，字体属性在任意时刻都只能应用一种设定，那此时该应用哪种字体呢？为解决类似的冲突，确定哪条规则“胜出”并最终被应用，CSS提供了三种机制：继承、层叠和特指。接下来的三节，就分别讨论这三种机制。</p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>body {font-family:helvetica, arial, sans-serif;}<br>body是所有所有元素的祖宗，所有元素都会继承它的样式，对于个别想使用自己的样式，只需自身指定即可，就如同OOP编程语言里面的类继承类似，如果子类想定义自己从父类的方法，也可重写实现自己的特性。<br>有些属性可以继承：颜色、字体、字号等<br>有些属性不能继承：边框、外边距、内边距</p>
<h5 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h5><h6 id="样式来源"><a href="#样式来源" class="headerlink" title="样式来源"></a>样式来源</h6><p>以下就是浏览器层叠各个来源样式的顺序：</p>
<ul>
<li>浏览器默认样式表</li>
<li>用户样式表</li>
<li>作者链接样式表（按照它们链接到页面的先后顺序）</li>
<li>作者嵌入样式</li>
<li>作者行内样式<br>以上样式会以冒泡交换的法则进行继承式替换。<h6 id="层叠规则"><a href="#层叠规则" class="headerlink" title="层叠规则"></a>层叠规则</h6></li>
<li>层叠规则一：找到应用给每个元素和属性的所有声明。浏览器在加载每个页面时，都会据此查到每一条CSS规则，标识出所有受到影响的HTML元素</li>
<li>层叠规则二：按照顺序和权重排序。浏览器依次检查5个来源，并设定匹配的属性。如果匹配的属性在下一个来源也有定义，则更新该属性的值，如此循环，直到检查完页面中所有标签受影响属性的全部5个来源为止。最终某个属性被设定成什么值，就用什么值来显示。声明也可以有权重。可以像下面这样为单独的声明增加权重：p {color:green !important; font-size:12pt;}空格!important分号（;）用于加重声明的权重。这条规则加重了将文本设置为绿色的权重。于是，就算层叠的下一来源给段落设定了其他颜色，最终的颜色值仍然还是绿色。</li>
<li>层叠规则三：按特指度排序，举例来说就是比如类选择符选中的规则比普通标签选择要高。<br>这里涉及到特指度的计算：I - C - E<ul>
<li>选择符中有一个ID，就在I的位置上加1；</li>
<li>选择符中有一个类，就在C的位置上加1；</li>
<li>选择符中有一个元素（标签）名，就在E的位置上加1；</li>
<li>得到一个三位数。</li>
</ul>
</li>
<li>层叠规则四：顺序决定权重。如果两条规则都影响某元素的同一个属性，而且它们的特指度也相同，则位置最靠下（或后声明）的规则胜出</li>
</ul>
<h6 id="规则声明"><a href="#规则声明" class="headerlink" title="规则声明"></a>规则声明</h6><p>css属性值主要分为三类</p>
<ul>
<li>文本值：font-weight:bold</li>
<li><p>数字值(又分为相对值和绝对值)：font-size:12px</p>
</li>
<li><p>颜色值：color:#336699</p>
<ul>
<li>十六进制颜色（#RRGGBB或#RGB):#rrggbb-十六进制以16为基数，使用数字0-9和字母a-f，共16个值。其中，a-f代表10到15。由于每种颜色用两位十六进制值表示，因此该颜色就有256（16×16）种可能的值，结果就是16 777 216（256×256×256）种组合，也就是可以表示那么多种颜色。纯红色是#ff0000，纯绿色是#00ff00，而纯蓝色是#0000ff。大多数十六进制颜色值不仔细分析可不容易猜，比如#7ca9be是深蓝绿色，我怎么知道的？ 首先我们来看每一对rgb值中的第一个值，也就是7、a、b。蓝色和绿色值相差无几，而红色值也没有那么深。有了这些信息，就可以大致猜出这个颜色了，对，是蓝绿色</li>
<li>RGB颜色值（R, G , B）</li>
<li>RGB百分比值（R%, G%, B%）</li>
<li>HSL (色相, 饱和度%, 亮度%)</li>
<li>Alpha通道：RGBA,HSLA<br><a href="http://colrd.com" target="_blank" rel="external">色彩网站</a></li>
</ul>
</li>
</ul>
<hr>
<h2 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h2><blockquote>
<p>页面版式主要由三个属性控制：position属性、display属性和float属性。其中，position属性控制页面上元素间的位置关系，display属性控制元素是堆叠、并排，还是根本不在页面上出现，float属性提供控制的方式，以便把元素组成成多栏布局。</p>
</blockquote>
<h3 id="理解盒模型"><a href="#理解盒模型" class="headerlink" title="理解盒模型"></a><a href="https://www.w3.org/TR/REC-CSS2/box.html" target="_blank" rel="external">理解盒模型</a></h3><ul>
<li>边框（border）。可以设置边框的宽窄、样式和颜色。</li>
<li>内边距（padding）。可以设置盒子内容区与边框的间距。</li>
<li>外边距（margin）。可以设置盒子与相邻元素的间距。</li>
</ul>
<h4 id="简写样式"><a href="#简写样式" class="headerlink" title="简写样式"></a>简写样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">margin-top</span>:<span class="number">5px</span>; <span class="attribute">margin-right</span>:<span class="number">10px</span>; <span class="attribute">margin-bottom</span>:<span class="number">12px</span>; <span class="attribute">margin-left</span>:<span class="number">8px</span>;&#125;</div><div class="line">&#123;<span class="attribute">margin</span>:<span class="number">5px</span> <span class="number">10px</span> <span class="number">12px</span> <span class="number">8px</span>;&#125;</div><div class="line">&#123;<span class="attribute">margin</span>:<span class="number">12px</span> <span class="number">10px</span> <span class="number">6px</span>;&#125;<span class="comment">/*由于没有写最后一个值（左边的值），所以左边就会使用右边的值，即10px。*/</span></div><div class="line">&#123;<span class="attribute">border</span>:<span class="number">2px</span> dashed red;&#125;<span class="comment">/*全部3个属性，全部4条边 */</span></div><div class="line">&#123;<span class="attribute">border-style</span>:dashed;&#125;<span class="comment">/*1个属性，全部4条边 */</span></div><div class="line">&#123;<span class="attribute">border-left-style</span>:dashed;&#125;<span class="comment">/*1个属性，1条边*/</span></div><div class="line">&#123;<span class="attribute">border</span>:<span class="number">4px</span> solid red;&#125;  <span class="comment">/* 先给4条边设置相同的样式 */</span>    </div><div class="line">&#123;<span class="attribute">border-left-width</span>:<span class="number">1px</span>;&#125; <span class="comment">/* 修改左边框宽度 */</span>  </div><div class="line">&#123;<span class="attribute">border-right</span>:none;&#125;     <span class="comment">/* 移除右边框 */</span></div><div class="line"><span class="comment">/*类似地，其他属性也都有这三级粒度，例如padding和border-radius等。*/</span></div></pre></td></tr></table></figure>
<h4 id="盒子边框"><a href="#盒子边框" class="headerlink" title="盒子边框"></a>盒子边框</h4><blockquote>
<p>边框（border）有3个相关属性。</p>
<ul>
<li>宽度（border-width）。可以使用thin、medium和thick等文本值，也可以使用除百分比和负值之外的任何绝对值。</li>
<li>样式（border-style）。有none、hidden、dotted、dashed、solid、double、groove、ridge、inset和outset等文本值。</li>
<li>颜色（border-color）。可以使用任意颜色值，包括RGB、HSL、十六进制颜色值和颜色关键字。<br>一般在开发中，我们会采用中和内外边距的写法，给需要边距的再单独编写样式:“* {margin:0; padding:0;}”<br>下面的这个样式表不仅重置了外边距和内边距，还对很多元素在跨浏览器显示时的外观进行了标准化。至于为什么，可以参考博客文章<a href="http://meyerweb.com/eric/thoughts/2007/04/18/reset-reasoning/" target="_blank" rel="external">1</a><a href="http://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="external">2</a><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/</span></div><div class="line">   v2.0 | 20110126</div><div class="line">   License: none (public domain)</div><div class="line">*/</div><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,<span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</div><div class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,<span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</div><div class="line"><span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,<span class="selector-tag">b</span>, <span class="selector-tag">u</span>, <span class="selector-tag">i</span>, <span class="selector-tag">center</span>,<span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</div><div class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,<span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</div><div class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">embed</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>,</div><div class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">output</span>, <span class="selector-tag">ruby</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,<span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</div><div class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">font</span>: inherit;</div><div class="line">	<span class="attribute">vertical-align</span>: baseline;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></div><div class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>,</div><div class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</div><div class="line">	<span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</div><div class="line">	<span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</div><div class="line">	<span class="attribute">quotes</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</div><div class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">	<span class="attribute">content</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">table</span> &#123;</div><div class="line">	<span class="attribute">border-collapse</span>: collapse;</div><div class="line">	<span class="attribute">border-spacing</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="叠加外边距"><a href="#叠加外边距" class="headerlink" title="叠加外边距"></a>叠加外边距</h4><blockquote>
<p>请看例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">为简明起见，省略了字体声明</div><div class="line">p &#123;height:50px; border:1px solid #000; backgroundcolor:#fff; margin-top:50px; margin-bottom:30px;&#125;</div><div class="line">由于第一段的下外边距与第二段的上外边距相邻，你自然会认为它们之间的外边距是80像素（50+30），但是你错啦！它们实际的间距是50像素。</div><div class="line">也就是说较宽的外边距决定两个元素最终离多远。</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="外边距的单位"><a href="#外边距的单位" class="headerlink" title="外边距的单位"></a>外边距的单位</h4><blockquote>
<p>根据经验，为文本元素设置外边距时通常需要混合使用不同的单位。比如说，一个段落的左、右外边距可以使用像素，以便该段文本始终与包含元素边界保持固定间距，不受字号变大或变小的影响。而对于上、下外边距，以em为单位则可以让段间距随字号变化而相应增大或缩小<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*这里使用了简写属性把上、下外边距设置为.75em，把左、右外边距设置为30像素*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">1em</span>; <span class="attribute">margin</span>:.<span class="number">75em</span> <span class="number">30px</span>;&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="盒子模型详解"><a href="#盒子模型详解" class="headerlink" title="盒子模型详解"></a>盒子模型详解</h3><h4 id="没有宽度的盒子"><a href="#没有宽度的盒子" class="headerlink" title="没有宽度的盒子"></a>没有宽度的盒子</h4><blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">font-family</span>:helvetica, arial, sans-serif; <span class="attribute">font-size</span>:<span class="number">1em</span>; <span class="attribute">margin</span>:<span class="number">0px</span>; <span class="attribute">background-color</span>:<span class="number">#caebff</span>;&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">30px</span>; <span class="attribute">background-color</span>:<span class="number">#fff</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span>; <span class="attribute">border</span>:solid red; <span class="attribute">border-width</span>:<span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span>;&#125;</div></pre></td></tr></table></figure>
<p>外边距在元素盒子与窗口之间创造了空白，此时内容宽度变成了288像素（400 – ( (20 + 6 + 30)× 2) ）。而元素声明的总宽度并没有变，仍然是400像素。<br><strong>盒模型结论一</strong>：没有（就是没有设置width的）宽度的元素始终会扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距，会导致内容宽度减少，减少量等于水平边框、内边距和外边距的和。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fgt8b06ln7j20ms0fc48f.jpg" alt=""><br><strong>盒模型结论二</strong>：为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子扩展得更宽。实际上，盒子的width属性设定的只是盒子内容区的宽度，而非盒子要占据的水平宽度。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fgt9evv240j20s80xkdvj.jpg" alt=""></p>
</blockquote>
<h4 id="浮动和清除"><a href="#浮动和清除" class="headerlink" title="浮动和清除"></a>浮动和清除</h4><blockquote>
<p>浮动和清除是用来组织页面布局的又一柄利剑，这柄剑的剑刃就是float和clear属性。浮动，你看这俩字儿多形象，意思就是把元素从常规文档流中拿出来。拿出来干什么？一是可以实现传统出版物上那种文字绕排图片的效果，二是可以让原来上下堆叠的块级元素，变成左右并列，从而实现布局中的分栏。浮动元素脱离了常规文档流之后，原来紧跟其后的元素就会在空间允许的情况下，向上提升到与浮动元素平起平坐。如果浮动元素后面有两个段落，而你只想让第一段与浮动元素并列（就算旁边还能放下第二段，也不想让它上来），怎么办？用clear属性来“清除”第二段，然后它就乖乖地呆在浮动元素下面了。</p>
<h5 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h5><p>CSS设计float属性的主要目的，是为了实现文本绕排图片的效果。然而，这个属性居然也成了创建多栏布局最简单的方式。<br>文本绕排图片<br><img ……=""></p>
<p></p><p>…the paragraph text…</p><br>/<em>为简明起见，省略了字体声明</em>/<br>p {margin:0; border:1px solid red;}<br>/<em>外边距防止图片紧挨文本</em>/<br>img {float:left; margin:0 4px 4px 0;<br>动图片会从文档流中被移除，如果在标记中有文本元素跟在它后面，则其中的文本会绕开图片.浮动非图片元素时，必须给它设定宽度，否则后果难以预料。图片无所谓，因为它本身有默认的宽度。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fgt9ngl84aj20q80gm4ei.jpg" alt=""><br>浮动还用另一种用途是<strong>实现分栏</strong><p></p>
<h5 id="围住浮动元素的三种方法"><a href="#围住浮动元素的三种方法" class="headerlink" title="围住浮动元素的三种方法"></a>围住浮动元素的三种方法</h5><ul>
<li>为父元素添加overflow：hidden</li>
<li>同时浮动父元素，同时给父元素下面的文档流一个{clear:left}</li>
<li>添加非浮动的清除元素<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/rubber_duck.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>It's fun to float.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear_me"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> Here is the footer element…<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- section &#123;border:1px solid blue;&#125;</span></div><div class="line">img &#123;float:left;&#125;</div><div class="line">.clear_me &#123;clear:left;&#125;</div><div class="line">footer &#123;border:1px solid red;&#125; --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/rubber_duck.jpg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>It's fun to float.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> Here is the footer element…<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- .clearfix:after &#123;</span></div><div class="line">    content:".";</div><div class="line">    display:block;</div><div class="line">    height:0;</div><div class="line">    visibility:hidden;</div><div class="line">    clear:both;</div><div class="line">&#125; --&gt;</div><div class="line"><span class="comment">&lt;!-- 这个clearfix规则最早是由程序员Tony Aslett发明的，它只添加了一个清除的包含句点作为非浮动元素（必须得有内容，而句点是最小的内容）1。规则中的其他声明是为了确保这个伪元素没有高度，而且在页面上不可见。</span></div><div class="line">使用clear:both意味着section中新增的子元素会清除左、右浮动元素（位于左、右浮动元素下方）。这里当然可以只用left，但both也适用于将来图片float:right的情况。--&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><blockquote>
<p>CSS布局的核心是position属性，对元素盒子应用这个属性，可以相对于它在常规文档流中的位置重新定位。position属性有4个值：static、relative、absolute、fixed，默认值为static。</p>
<ul>
<li>静态定位：static块级元素会在默认文档流中上下堆叠</li>
<li>相对定位reletive：相对的是它原来在文档流中的位置，可以使用top、right、bottom和left属性来改变它的位置了。但多数情况下，只用top和left就可以实现我们想要的效果。{position:relative; top:25px; left:30px;}</li>
<li>绝对定位absolute：绝对定位会把元素彻底从文档流中拿出来，有的时候是相对body进行定位，这就涉及到定位上下文的概念了。绝对定位默认的上下文是body元素。</li>
<li>固定定位fixed：从完全移出文档流的角度说，固定定位与绝对定位类似，{position:fixed; top:30px; left:20px;}，但不同之处在于，固定定位元素的定位上下文是视口（浏览器窗口或手持设备的屏幕），因此它不会随页面滚动而移动。固定定位并不常用，最常见的情况是用它创建不随页面滚动而移动的导航元素。</li>
<li><strong>定位上下文</strong>:把元素的position属性设定为relative、absolute或fixed后，继而可以使用top、right、bottom和left属性，相对于另一个元素移动该元素的位置。这里的“另一个元素”，就是该元素的定位上下文。<br>在讲绝对定位的时候，我们知道绝对定位元素默认的定位上下文是body。这是因为body是标记中所有元素唯一的祖先元素。而实际上，绝对定位元素的任何祖先元素都可以成为它的定位上下文，只要你把相应祖先元素的position设定为relative即可。</li>
</ul>
</blockquote>
<h4 id="显示属性"><a href="#显示属性" class="headerlink" title="显示属性"></a>显示属性</h4><blockquote>
<p>所有元素都有postion和display,display的默认值是block和inline。块级元素和行内元素可以相互转换<br>/<em>默认为block</em>/p {display:inline;}/<em>默认为inline</em>/a {display:block;}<br>display属性设置为none，会把元素的display设定为none，该元素及所有包含在其中的元素，都不会在页面中显示。它们原先占据的所有空间也都会被“回收”。与此相对的是visibility属性，这个属性最常用的两个相对的值是visible（默认值）和hidden。把元素的visibility设定为hidden，元素会隐藏，但它占据的页面空间仍然“虚位以待”。</p>
</blockquote>
<h4 id="背景色"><a href="#背景色" class="headerlink" title="背景色"></a>背景色</h4><blockquote>
<p>每个元素盒子都可以想象成由两个图层组成。元素的前景层包含内容（如文本或图片）和边框，元素的背景层可以用实色填充（使用background-color属性），也可以包含任意多个背景图片（使用background-image属性），背景图片叠加在背景颜色之上。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fh4lpx9r9fj21qc0xoqrw.jpg" alt="背景色"></p>
<h5 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h5><p>元素的background-color是蓝绿色，段落的background-color是白色，前景色color是灰色，前景色既影响文本，也影响边框</p>
<h5 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h5><p>background-image:url(images/blue_circle.png);比元素小的背景图片会在水平和垂直方向上重复出现，直至填满整个背景空间<br>要改变默认的水平和垂直重复效果，可以修改background-repeat属性；要改变背景图片的起点，可以修改background-position属性。<br>默认值就是repeat另外3个值分别是只在水平方向重复的repeat-x、只在垂直方向上重复的repeat-y和在任何方向上都不重复（或者说只让背景图片显示一次）的no-repeat</p>
<h5 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h5><p>用于控制背景位置的background-position属性，是所有背景属性中最复杂的。background-position属性有5个关键字值，分别是top、left、bottom、right和center，这些关键字中的任意两个组合起来都可以作为该属性的值。比如，top right表示把图片放在元素的右上角位置，center center把图片放在元素的中心位置。设定背景位置时可以使用三种值：关键字、百分比、绝对或相对单位的数值</p>
<h5 id="背景尺寸"><a href="#背景尺寸" class="headerlink" title="背景尺寸"></a>背景尺寸</h5><p>background-size：</p>
<ul>
<li>50%：缩放图片，使其填充背景区的一半。</li>
<li>100px 50px：把图片调整到100像素宽，50像素高。</li>
<li>cover：拉大图片，使其完全填满背景区；保持宽高比。</li>
<li>contain：缩放图片，使其恰好适合背景区；保持宽高比。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fh4mxnkj8mj20oy0nenb4.jpg" alt="background-size"><h5 id="背景粘附"><a href="#背景粘附" class="headerlink" title="背景粘附"></a>背景粘附</h5>“background-attachment属性控制滚动元素内的背景图片是否随元素滚动而移动。这个属性的默认值是scroll，即背景图片随元素移动。如果把它的值改为fixed，那么背景图片不会随元素滚动而移动。<br>background-attachment:fixed最常用于给body元素中心位置添加淡色水印，让水印不随页面滚动而移动。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;    <span class="attribute">background-image</span>:<span class="built_in">url</span>(images/watermark.png);</div><div class="line">    <span class="attribute">background-position</span>:center;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#fff</span>;</div><div class="line">    <span class="attribute">background-repeat</span>:no-repeat;</div><div class="line">    <span class="attribute">background-size</span>:contain;</div><div class="line">    <span class="attribute">background-attachment</span>:fixed;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*简写*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>:<span class="built_in">url</span>(images/watermark.png) center <span class="number">#fff</span> no-repeat contain fixed;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h5 id="多背景图片"><a href="#多背景图片" class="headerlink" title="多背景图片"></a>多背景图片</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">348px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#aaa</span>;</div><div class="line"></div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto;</div><div class="line">    <span class="attribute">font</span>:<span class="number">24px</span>/<span class="number">150px</span> helvetica, arial, sansserif;</div><div class="line"></div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">    <span class="attribute">background</span>:</div><div class="line">    <span class="built_in">url</span>(images/turq_spiral.png) <span class="number">30px</span> -<span class="number">10px</span> no-repeat,</div><div class="line">    <span class="built_in">url</span>(images/pink_spiral.png) <span class="number">145px</span> <span class="number">0px</span> no-repeat,</div><div class="line">    <span class="built_in">url</span>(images/gray_spiral.png) <span class="number">140px</span> -<span class="number">30px</span> no-repeat, <span class="number">#ffbd75</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*多张图片可以在背景中叠加起来，CSS规则中先列出的图片在上层*/</span></div></pre></td></tr></table></figure>
<h4 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h4><blockquote>
<p>渐变分两种，一种线性渐变，一种放射性渐变。线性渐变从元素的一端延伸到另一端，放射性渐变则从元素内一点向四周发散。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*为元素盒子添加样式*/</span></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例1：默认为从上到下*/</span></div><div class="line"><span class="selector-class">.gradient1</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#e86a43, #fff);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例2：从左到右*/</span></div><div class="line"><span class="selector-class">.gradient2</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(left, #64d1dd, #fff);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例3：左上到右下*/</span></div><div class="line"><span class="selector-class">.gradient3</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(-45deg, #e86a43, #fff);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fh4p5lcoknj20ti08y424.jpg" alt=""></p>
<h5 id="渐变点"><a href="#渐变点" class="headerlink" title="渐变点"></a>渐变点</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">“<span class="comment">/*例1：50%处有一个渐变点*/</span></div><div class="line"><span class="selector-class">.gradient1</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#64d1dd, #fff 50%, #64d1dd);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例2：20%和80%处有两个渐变点*/</span></div><div class="line"><span class="selector-class">.gradient2</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#e86a43 20%, #fff 50%, #e86a43 80%);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例3：25%、50%、75%处有三个渐变点*/</span></div><div class="line"><span class="selector-class">.gradient3</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#64d1dd, #fff 25%, #64d1dd 50%, #fff 75%, #64d1dd);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*例4：为同一个渐变点设定两种颜色可以得到突变效果*/</span></div><div class="line"><span class="selector-class">.gradient4</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(#e86a43, #fff 25%, #64d1dd 25%, #64d1dd 75%, #fff 75%, #e86a43);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fh4p9f8lpxj20ri07ydjq.jpg" alt=""></p>
<h5 id="放射性渐变"><a href="#放射性渐变" class="headerlink" title="放射性渐变"></a>放射性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.gradient1</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(#fff, #64d1dd, #70aa25);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.gradient2</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(circle, #fff, #64d1dd, #e86a43);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.gradient3</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(50px 30px, circle, #fff, #64d1dd, #4947ba);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fh4pbity10j20ry090afl.jpg" alt=""></p>
<h4 id="厂商前缀"><a href="#厂商前缀" class="headerlink" title="厂商前缀"></a>厂商前缀</h4><blockquote>
<p>为鼓励浏览器厂商尽早采用W3C的CSS3推荐标准，于是就产生了VSP（Vendor Specific Prefixes，厂商前缀）的概念。有了这些CSS属性的前缀，厂商就可以尝试实现W3C涵盖新CSS属性的工作草案。在迅速实现新属性的同时，还可以声明它们是过渡的、部分实现的，或者实验性的。总之，后果由使用者自负。<br>就拿W3C推荐的transform属性为例，标准语法是这样的：<br>transform: skewX(-45deg);<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-moz-transform</span><span class="selector-pseudo">:skewX(-45deg)</span>;    <span class="comment">/* Firefox */</span></div><div class="line"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:skewX(-45deg)</span>; <span class="comment">/* Chrome及Safari */</span></div><div class="line"><span class="selector-tag">-ms-transform</span><span class="selector-pseudo">:skewX(-45deg)</span>;     <span class="comment">/* 微软Internet Explorer */</span></div><div class="line"><span class="selector-tag">-o-transform</span><span class="selector-pseudo">:skewX(-45deg)</span>;      <span class="comment">/* Opera */</span></div><div class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skewX(-45deg)</span>;         <span class="comment">/* 最后是W3C标准属性 */</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>Safari和Chrome都使用相同的-webkit-前缀，是因为它们都使用Webkit渲染引擎。”<br>以下CSS3属性必须加VPS：<br>border-image       translate<br>linear-gradient    transition<br>radial-gradient    background<em><br>transform          background-image</em><br>transform-origin</p>
<h4 id="字体和文本"><a href="#字体和文本" class="headerlink" title="字体和文本"></a>字体和文本</h4><h4 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h4><blockquote>
<p>为了达到三栏布局，可以使用float:left,但还有时候随着给一栏增加内外边距等，会使得第三栏放不下，浮到下面，这里面有，这种情况下有三种手段解决：</p>
<ul>
<li>从设定的元素宽度中减去添加的水平外边距、边框和内边距的宽度和。</li>
<li>在容器内部的元素上添加内边距或外边距。</li>
<li>使用CSS3的box-sizing属性切换盒子缩放方式，比如section {box-sizing:border-box;}。 应用box-sizing属性后，给section添加边框和内边距都不会增大盒子，相反会导致内容变窄。</li>
<li>子-星选择符<h5 id="预防过大的元素"><a href="#预防过大的元素" class="headerlink" title="预防过大的元素"></a>预防过大的元素</h5>设计一个将来可能由他人维护的动态网站时，需要考虑得更长远一些。比如，应该预见到可能出现一些过大的元素。</li>
<li>img {max-width:100%;}</li>
<li>overflow:hidden</li>
<li>word-wrap:break-word<h5 id="三栏-中栏流动布局"><a href="#三栏-中栏流动布局" class="headerlink" title="三栏-中栏流动布局"></a>三栏-中栏流动布局</h5>实现中栏流动布局有两种方法。一种是在中栏改变大小时使用负外边距定位右栏，另一种是使用CSS3让栏容器具有类似表格单元的行为。负外边距适合比较老的浏览器，而CSS的table属性则要简单得多</li>
<li>用负外边距实现：实现三栏布局且让中栏内容区流动（不固定）的核心问题，就是处理右栏的定位，并在中栏内容区大小改变时控制右栏与布局的关系。解决方案是控制两个外包装（通过ID值为wrapper）容器的外边距。其中一个外包装包围所有三栏，另一个外包装只包围左栏和中栏。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main_wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 页眉--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"threecolwrap"</span>&gt;</span>/*三栏外包装（包围全部三栏）*/</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"twocolwrap"</span>&gt;</span>/*两栏外包装（包围左栏和中栏）*/</div><div class="line">            /*左栏*/</div><div class="line">            <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 导航 --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">            /*中栏*/</div><div class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">            “     <span class="comment">&lt;!-- 区块 --&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>/*结束两栏外包装（twocolwrap）*/</div><div class="line">                    /*右栏*/</div><div class="line">                    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></div><div class="line">                        <span class="comment">&lt;!-- 侧栏 --&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>/*结束三栏外包装（threecolwrap）*/</div><div class="line">                <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- 页脚 --&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">* &#123;margin:0; padding:0;&#125;</div><div class="line">body &#123;font:1em helvetica, arial, sans-serif;&#125;</div><div class="line">div#main_wrapper&#123;</div><div class="line">    min-width:600px; max-width:1100px;</div><div class="line">    /*超过最大宽度时，居中布局*/</div><div class="line">      margin:0 auto;</div><div class="line">      /*背景图片默认从左上角开始拼接*/</div><div class="line">      background:url(images/bg_tile_150pxw.png) repeat-y #eee;</div><div class="line">  &#125;</div><div class="line">  header &#123;</div><div class="line">      padding:5px 10px;</div><div class="line">      background:#3f7ccf;</div><div class="line">  &#125;</div><div class="line">  div#threecolwrap &#123;</div><div class="line">      /*浮动强制它包围浮动的栏*/</div><div class="line">      float:left;</div><div class="line">      width:100%;</div><div class="line">      /*背景图片右对齐*/</div><div class="line">      background:url(images/bg_tile_210pxw.png) top right repeat-y;</div><div class="line">  &#125;</div><div class="line">  div#twocolwrap &#123;</div><div class="line">      /*浮动强制它包围浮动的栏*/</div><div class="line">      float:left;</div><div class="line">      width:100%;</div><div class="line">      /*把右栏拉到区块外边距腾出的位置上*/</div><div class="line">      margin-right:-210px;</div><div class="line">      &#125;</div><div class="line">nav &#123;</div><div class="line">    float:left;</div><div class="line">    width:150px;</div><div class="line">    background:#f00;</div><div class="line">    padding:20px 0;</div><div class="line">&#125;</div><div class="line">/*让子元素与栏边界保持一定距离*/</div><div class="line">nav &gt; * &#123;margin:0 10px;&#125;</div><div class="line">article &#123;</div><div class="line">    width:auto;</div><div class="line">    margin-left:150px;</div><div class="line">    /*在流动居中的栏右侧腾出空间*/</div><div class="line">    margin-right:210px;</div><div class="line">    background:#eee;</div><div class="line">    padding:20px 0;</div><div class="line">&#125;</div><div class="line">*让子元素与栏边界保持一定距离*/</div><div class="line">article &gt; * &#123;margin:0 20px;&#125;</div><div class="line">aside &#123;</div><div class="line">    float:left;</div><div class="line">    width:210px;</div><div class="line">    background:#ffed53;</div><div class="line">    padding:20px 0;</div><div class="line">&#125;</div><div class="line">    *让子元素与栏边界保持一定距离*/</div><div class="line">    aside &gt; * &#123;margin:0 10px;&#125;</div><div class="line">    footer &#123;</div><div class="line">        clear:both;</div><div class="line">        width:100%;</div><div class="line">        text-align:center;</div><div class="line">        background:#000;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>用CSS3单元格实现<blockquote>
<p>CSS可以把一个HTML元素的display属性设定为table、table-row和table-cell。通过这种方法可以模拟相应HTML元素的行为。而通过CSS把布局中的栏设定为table-cell有三个好处。</p>
</blockquote>
</li>
<li>单元格（table-cell）不需要浮动就可以并排显示，而且直接为它们应用内边距也不会破坏布局。</li>
<li>默认情况下，一行中的所有单元格高度相同，因而也不需要人造的等高栏效果了。</li>
<li>任何没有明确设定宽度的栏都是流动的。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> &#123;<span class="attribute">display</span>:table-cell; <span class="attribute">width</span>:<span class="number">150px</span>; <span class="attribute">padding</span>:<span class="number">10px</span>;</div><div class="line">     <span class="attribute">background</span>:<span class="number">#dcd9c0</span>;&#125;</div><div class="line"><span class="selector-tag">article</span> &#123;<span class="attribute">display</span>:table-cell; <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">20px</span>;</div><div class="line">     <span class="attribute">background</span>:<span class="number">#ffed53</span>;&#125;</div><div class="line"><span class="selector-tag">aside</span> &#123;<span class="attribute">display</span>:table-cell; <span class="attribute">width</span>:<span class="number">210px</span>; <span class="attribute">padding</span>:<span class="number">10px</span>;</div><div class="line">     <span class="attribute">background</span>:<span class="number">#3f7ccf</span>;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="多行多栏布局"><a href="#多行多栏布局" class="headerlink" title="多行多栏布局"></a>多行多栏布局</h5><blockquote>
<p>类是用来标记具有相同特征的元素的。ID最好是用来标记每个主要区域的顶级元素，这样可以充当路标。<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fhkz5uk3mkj20q80h2wts.jpg" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Full-width content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Navigation menus go here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"branding"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/grand_canyon.jpg"</span> <span class="attr">alt</span>=<span class="string">"Grand Canyon"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span><span class="comment">&lt;!-- branding 结束 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"feature_area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem Ipsum text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 省略另外两个 article 元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span><span class="comment">&lt;!-- feature_area 结束--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"promo_area"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem Ipsum text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 省略另外三个 article 元素 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span><span class="comment">&lt;!-- promo_area 结束--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>A CSS template from <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.stylinwithcss.com"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Stylin’ with CSS, Third Edition<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> by            Charles Wyke-Smith<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*每个article作为一个浮动栏*/</div><div class="line">section#feature_area article &#123;</div><div class="line">    float:left;</div><div class="line">    “width:320px;</div><div class="line">    /*对于作为栏的容器，只能添加垂直内边距*/</div><div class="line">    padding:10px 0;</div><div class="line">    background:#fff;</div><div class="line">    border-top:4px solid #f7be84;</div><div class="line">&#125;</div><div class="line">/*为所有内容盒子添加公共样式*/</div><div class="line">section#feature_area article .inner &#123;</div><div class="line">    margin:10px 20px;</div><div class="line">    padding:5px;</div><div class="line">    background:#fff;</div><div class="line">    border:5px solid;</div><div class="line">&#125;</div><div class="line">/*以下三条分别为三个内容盒子设定样式*/</div><div class="line">section#feature_area article:nth-child(1) .inner &#123;</div><div class="line">    border-color:#d7dd6f;</div><div class="line">&#125;</div><div class="line">section#feature_area article:nth-child(2) .inner &#123;</div><div class="line">    border-color:#f6dec5;</div><div class="line">&#125;</div><div class="line">section#feature_area article:nth-child(3) .inner &#123;</div><div class="line">  border-color:#d1d8e4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="界面组件"><a href="#界面组件" class="headerlink" title="界面组件"></a>界面组件</h4><h5 id="纵向导航菜单"><a href="#纵向导航菜单" class="headerlink" title="纵向导航菜单"></a>纵向导航菜单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"list1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Alternative<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Jazz<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Rock<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*去掉默认的内边距和外边距*/</span></div><div class="line">* &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="comment">/*设定本例中菜单的大小和位置*/</span></div><div class="line"><span class="selector-tag">nav</span> &#123;<span class="attribute">margin</span>:<span class="number">50px</span>; <span class="attribute">width</span>:<span class="number">150px</span>;&#125;</div><div class="line"><span class="comment">/*给菜单加上边框*/</span></div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">ul</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#f00</span>; <span class="attribute">border-radius</span>:<span class="number">3px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">10px</span> <span class="number">3px</span>;&#125;</div><div class="line"><span class="comment">/*去掉项目符号并为链接添加间距*/</span></div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> &#123;<span class="attribute">list-style-type</span>:none; <span class="attribute">padding</span>:<span class="number">3px</span> <span class="number">10px</span>;&#125;</div><div class="line"><span class="comment">/*“非首位子元素”选择符*/</span></div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> + <span class="selector-tag">li</span> &#123;<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#f00</span>;&#125;</div><div class="line"><span class="comment">/*为链接添加样式*/</span></div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">font</span>:<span class="number">20px</span> Exo, helvetica,</div><div class="line">        arial, sans-serif; <span class="attribute">font-weight</span>:<span class="number">400</span>; <span class="attribute">color</span>:<span class="number">#000</span>;</div><div class="line">        <span class="attribute">background</span>:<span class="number">#ffed53</span>;&#125;</div><div class="line"><span class="comment">/*悬停高亮*/</span></div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#069</span>;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fhln9f7ewkj20aw0a0acb.jpg" alt=""></p>
<blockquote>
<p>使用“非首位子元素”选择符:li + li选择符的意思是“任何跟在li之后的li”。<br>也可以这样写：<br>/<em>给所有li上方添加一条边框</em>/<br>li {border-top:1px solid #f00;}<br>/<em>去掉第一个li上方的边框</em>/<br>li:first-child {border-top:none;}<br>改进版<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">* &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="selector-tag">nav</span> &#123;<span class="attribute">margin</span>:<span class="number">50px</span>; <span class="attribute">width</span>:<span class="number">150px</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">ul</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#f00</span>; <span class="attribute">border-radius</span>:<span class="number">3px</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="number">5px</span> <span class="number">10px</span> <span class="number">3px</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> &#123;<span class="attribute">list-style-type</span>:none; <span class="attribute">padding</span>:<span class="number">3px</span> <span class="number">10px</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> + <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#f00</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span> &#123;<span class="attribute">display</span>:block; <span class="attribute">padding</span>:<span class="number">3px</span> <span class="number">10px</span>; <span class="attribute">textdecoration</span>:</div><div class="line">          none; <span class="attribute">font</span>:<span class="number">20px</span> Exo, helvetica, arial, sansserif;</div><div class="line"><span class="attribute">font-weight</span>:<span class="number">400</span>; <span class="attribute">color</span>:<span class="number">#000</span>; <span class="attribute">background</span>:<span class="number">#ffed53</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#069</span>;&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fhlng81jotj20b20b277b.jpg" alt=""></p>
<h5 id="横向菜单"><a href="#横向菜单" class="headerlink" title="横向菜单"></a>横向菜单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"list1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Shirts<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Pants<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dresses<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Shoes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Accessories<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="comment">/*强制ul包围浮动的li元素*/</span></div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="comment">/*让li元素水平排列*/</span></div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="comment">/*去掉项目符号*/</span></div><div class="line">    <span class="attribute">list-style-type</span>:none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="comment">/*让链接填满li元素*/</span></div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">16px</span>;</div><div class="line">    <span class="comment">/*去掉链接的下划线*/</span></div><div class="line">    <span class="attribute">text-decoration</span>:none;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">li</span> + <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;<span class="attribute">border-left</span>:<span class="number">1px</span> solid <span class="number">#aaa</span>;&#125;</div><div class="line"><span class="selector-class">.list1</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:<span class="number">#555</span>;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>浮动让li元素从垂直变成水平，display:block让链接从收缩变成扩张，从而整个li元素都变成了可以点击的。另外，选择符li + li a为除第一个链接之外的每个链接左侧都加了一条竖线，作为视觉分隔线。好啦，可以讲更复杂的样式了。</p>
<h5 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h5><p><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fhlumiy50bj20pg0can2d.jpg" alt=""><br>三级菜单的实现，是通过ul的三层嵌套来实现的</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"multi_drop_menu"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 一级开始 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Money<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Love<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Fame<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 二级开始 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Sports Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Movie Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Rock Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- 三级开始 --&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bruce Springsteen<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bono<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Mick Jagger<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bob Dylan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 三级结束 --&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Web Designer<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 二级结束 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 一级结束 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*顶级菜单样式*/</span></div><div class="line"><span class="comment">/*添加视觉样式*/</span></div><div class="line"><span class="selector-class">.multi_drop_menu</span> &#123;<span class="attribute">font</span>:<span class="number">1em</span> helvetica, arial, sans-serif;&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="comment">/*让链接充满列表项*/</span></div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="comment">/*文本颜色*/</span></div><div class="line">    <span class="attribute">color</span>:<span class="number">#555</span>;</div><div class="line">    <span class="comment">/*背景颜色*/</span></div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#eee</span>;</div><div class="line">    <span class="comment">/*链接的内边距*/</span></div><div class="line">    <span class="attribute">padding</span>:.<span class="number">2em</span> <span class="number">1em</span>;</div><div class="line">    <span class="comment">/*分隔线宽度*/</span></div><div class="line">    <span class="attribute">border-width</span>:<span class="number">3px</span>;</div><div class="line">    <span class="comment">/*可以有颜色，也可以透明*/</span></div><div class="line">    <span class="attribute">border-color</span>:transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="comment">/*悬停时文本颜色*/</span></div><div class="line">    <span class="attribute">color</span>:<span class="number">#fff</span>;</div><div class="line">    <span class="comment">/*悬停时背景色*/</span></div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">    <span class="comment">/*点击时背景变色*/</span></div><div class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</div><div class="line">    <span class="comment">/*点击时文本变色*/</span></div><div class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*添加功能样式*/</span></div><div class="line"><span class="selector-class">.multi_drop_menu</span> * &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="comment">/*强制ul包围li*/</span></div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">ul</span> &#123;<span class="attribute">float</span>:left;&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="comment">/*水平排列菜单项*/</span></div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="comment">/*去掉默认的项目符号*/</span></div><div class="line">    <span class="attribute">list-style-type</span>:none;</div><div class="line">    <span class="comment">/*为子菜单提供定位上下文*/</span></div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="comment">/*让链接填充列表项*/</span></div><div class="line">    <span class="attribute">display</span>:block;</div><div class="line">    <span class="comment">/*给每个链接添加一个右边框*/</span></div><div class="line">    <span class="attribute">border-right-style</span>:solid;</div><div class="line">    <span class="comment">/*背景只出现在内边距区域后面*/</span></div><div class="line">    <span class="attribute">background-clip</span>:padding-box;</div><div class="line">    <span class="comment">/*去掉链接的下划线*/</span></div><div class="line">    <span class="attribute">text-decoration</span>:none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;<span class="attribute">border-right-style</span>:none;&#125;</div><div class="line"><span class="comment">/*临时隐藏低级菜单*/</span></div><div class="line"><span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;<span class="attribute">display</span>:none;&#125;</div></pre></td></tr></table></figure>
<p></p>
<h4 id="常用场景技能实现"><a href="#常用场景技能实现" class="headerlink" title="常用场景技能实现"></a>常用场景技能实现</h4><blockquote>
<ul>
<li>居中<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">  margin:20px auto;</div><div class="line">&#125;</div><div class="line">/*让文本和图片垂直居中*/</div><div class="line">div &#123;</div><div class="line">    height:150px;</div><div class="line">    width:250px;</div><div class="line">    border:2px solid #aaa;</div><div class="line">    margin:20px auto;</div><div class="line">    background-image:url(images/turq_spiral_150.png);</div><div class="line">    background-repeat:no-repeat;</div><div class="line">    background-position:50% 50%;//</div><div class="line">    text-align: center;//</div><div class="line">    line-height: 250px;//</div><div class="line">&#125;</div><div class="line">li &#123;</div><div class="line">    /*去掉列表项目符号*/</div><div class="line">    list-style-type:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要为自己的公众号开发一个小程序，所以要温习一下css样式知识，在此做个笔记也供以后便捷温习学习；&lt;/p&gt;
&lt;h3 id=&quot;css学习笔记&quot;&gt;&lt;a href=&quot;#css学习笔记&quot; class=&quot;headerlink&quot; title=&quot;css学习笔记&quot;&gt;&lt;/a&gt;css学习笔
    
    </summary>
    
      <category term="css" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/css/"/>
    
    
      <category term="css" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>c/cpp学习笔记</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/16/c-cpp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/16/c-cpp学习笔记/</id>
    <published>2017-04-16T09:03:39.000Z</published>
    <updated>2017-04-16T14:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>从大学刚学习c/cpp以来，几年过去了，但是由于大学没有好好深入学习研究c/cpp以及算法，挺后悔的。所以奉劝计算机专业的学生，大学不应该过早步入各种开发的步调，而忽略c/cpp、算法、基础专业知识的学习。其实一开始，最重要的就是把基础打扎实了，编程的思维方式和动手能力很重要，如何将现实问题，通过算法建模转化为代码才是至关重要的，可以视为灵魂。<br>所以我把自己学习的过程做记录，没事的时候仔细体会，别有一番风味，每次也会有不一样的体会。</p>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote>
<p>先以一段代码开始<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// create two arrays we care about</span></div><div class="line">    <span class="keyword">int</span> ages[] = &#123;<span class="number">23</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">2</span>&#125;;</div><div class="line">    <span class="keyword">char</span> *names[] = &#123;</div><div class="line">        <span class="string">"Alan"</span>, <span class="string">"Frank"</span>,</div><div class="line">        <span class="string">"Mary"</span>, <span class="string">"John"</span>, <span class="string">"Lisa"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// safely get the size of ages</span></div><div class="line">    <span class="keyword">int</span> count = <span class="keyword">sizeof</span>(ages) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="comment">// first way using indexing</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s has %d years alive.\n"</span>,</div><div class="line">                names[i], ages[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// setup the pointers to the start of the arrays</span></div><div class="line">    <span class="keyword">int</span> *cur_age = ages;</div><div class="line">    <span class="keyword">char</span> **cur_name = names;</div><div class="line">    <span class="comment">// second way using pointers</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s is %d years old.\n"</span>,</div><div class="line">                *(cur_name+i), *(cur_age+i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// third way, pointers are just arrays</span></div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s is %d years old again.\n"</span>,</div><div class="line">                cur_name[i], cur_age[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"---\n"</span>);</div><div class="line">    <span class="comment">// fourth way with pointers in a stupid complex way</span></div><div class="line">    <span class="keyword">for</span>(cur_name = names, cur_age = ages;</div><div class="line">            (cur_age - ages) &lt; count;</div><div class="line">            cur_name++, cur_age++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s lived %d years so far.\n"</span>,</div><div class="line">                *cur_name, *cur_age);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很好的诠释了指正的工作原理，首先</p>
<ul>
<li>在你的计算机中开辟一块内存。</li>
<li>将ages这个名字“指向”它的起始位置。</li>
<li>通过选取ages作为基址，并且获取位置为i的元素，来对内存块进行索引。</li>
<li>将ages+i处的元素转换成大小正确的有效的int，这样就返回了你想要的结果：下标i处的int。</li>
</ul>
<p>指针仅仅是指向计算机中的某个地址，并带有类型限定符，所以你可以通过它得到正确大小的数据，指针的用途就是让你手动对内存块进行索引，一些情况下数组并不能做到。绝大多数情况中，你可能打算使用数组，但是一些处理原始内存块的情况，是指针的用武之地。指针向你提供了原始的、直接的内存块访问途径，让你能够处理它们。<br>指针有四个最基本的操作：</p>
<ul>
<li>向OS申请一块内存，并且用指针处理它。这包括字符串，和一些你从来没见过的东西，比如结构体。</li>
<li>通过指针向函数传递大块的内存（比如很大的结构体），这样不必把全部数据都传递进去。</li>
<li>获取函数的地址用于动态调用。</li>
<li>对一块内存做复杂的搜索，比如，转换网络套接字中的字节，或者解析文<br>其实当我们在阅读别人的代码或者自己运用指正，只要把下面这几点牢记于心，就应该没问题，一步一步去拆解理解：</li>
<li>type *ptr：type类型的指针，名为ptr</li>
<li>*ptr：ptr所指向位置的值</li>
<li>*(ptr + i)：ptr所指向位置加上i）的值</li>
<li>&amp;thing：thing的地址</li>
<li>type *ptr = &amp;thing：名为ptr，type类型的指针，值设置为thing的地址</li>
<li>ptr++：自增ptr指向的位置*</li>
</ul>
</blockquote>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote>
<p>从一段代码搞起：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Person &#123;</div><div class="line">    <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">int</span> height;</div><div class="line">    <span class="keyword">int</span> weight;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">struct</span> Person *<span class="title">Person_create</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">int</span> height, <span class="keyword">int</span> weight)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> Person *who = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Person));</div><div class="line">    assert(who != <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//使用strdup来复制字符串name，是为了确保结构体真正拥有它。strdup的行为实际上类似malloc但是它同时会将原来的字符串复制到新创建的内存。</span></div><div class="line">    who-&gt;name = strdup(name);</div><div class="line">    who-&gt;age = age;</div><div class="line">    who-&gt;height = height;</div><div class="line">    who-&gt;weight = weight;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> who;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person_destroy</span><span class="params">(<span class="keyword">struct</span> Person *who)</span></span></div><div class="line">&#123;</div><div class="line">    assert(who != <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(who-&gt;name);</div><div class="line">    <span class="built_in">free</span>(who);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person_print</span><span class="params">(<span class="keyword">struct</span> Person *who)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, who-&gt;name);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tAge: %d\n"</span>, who-&gt;age);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tHeight: %d\n"</span>, who-&gt;height);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\tWeight: %d\n"</span>, who-&gt;weight);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// make two people structures</span></div><div class="line">    <span class="keyword">struct</span> Person *joe = Person_create(</div><div class="line">            <span class="string">"Joe Alex"</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">140</span>);</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> Person *frank = Person_create(</div><div class="line">            <span class="string">"Frank Blank"</span>, <span class="number">20</span>, <span class="number">72</span>, <span class="number">180</span>);</div><div class="line"></div><div class="line">    <span class="comment">// print them out and where they are in memory</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Joe is at memory location %p:\n"</span>, joe);</div><div class="line">    Person_print(joe);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Frank is at memory location %p:\n"</span>, frank);</div><div class="line">    Person_print(frank);</div><div class="line"></div><div class="line">    <span class="comment">// make everyone age 20 years and print them again</span></div><div class="line">    joe-&gt;age += <span class="number">20</span>;</div><div class="line">    joe-&gt;height -= <span class="number">2</span>;</div><div class="line">    joe-&gt;weight += <span class="number">40</span>;</div><div class="line">    Person_print(joe);</div><div class="line"></div><div class="line">    frank-&gt;age += <span class="number">20</span>;</div><div class="line">    frank-&gt;weight += <span class="number">20</span>;</div><div class="line">    Person_print(frank);</div><div class="line">    <span class="comment">// destroy them both so we clean up</span></div><div class="line">    Person_destroy(joe);</div><div class="line">    Person_destroy(frank);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>其实结构体就相当于数据库中的一行或者OOP语言中的类一样*</p>
<p>##</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从大学刚学习c/cpp以来，几年过去了，但是由于大学没有好好深入学习研究c/cpp以及算法，挺后悔的。所以奉劝计算机专业的学生，大学不应该过早步入各种开发的步调，而忽略c/cpp、算法、基础专业知识的学习。其实一开始，最重要的就是把基础打扎实了，编程的思维方式和动手能力很重
    
    </summary>
    
      <category term="c/cpp" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/c-cpp/"/>
    
    
      <category term="c/cpp" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/c-cpp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客迁移部署到oschina(开源中国)&amp;&amp;codingNet(码市)</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/09/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E9%83%A8%E7%BD%B2%E5%88%B0oschina-%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD-coding-%E7%A0%81%E4%BA%91/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/09/Hexo博客迁移部署到oschina-开源中国-coding-码云/</id>
    <published>2017-04-08T16:14:29.000Z</published>
    <updated>2017-04-08T16:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天突然发现github.io的pags服务挂掉了,导致博客登录不上，为了防止以后类似情况的发生，决定把博客部署到国内的一些托管平台，比如开源中国和码市。因为二者都支持项目开启pages服务，所以迁移起来很简单;</p>
<h3 id="step1、新建项目仓"><a href="#step1、新建项目仓" class="headerlink" title="step1、新建项目仓"></a>step1、新建项目仓</h3><ul>
<li>到<a href="https://git.oschina.net">开源中国</a>和<a href="https://coding.net/" target="_blank" rel="external">码市</a>申请账号登录新建项目</li>
<li><strong>在新建项目的时候，对于pages项目，项目的名称一定要跟用户名一致，不然后面当博客源码推送到仓库上的时候，访问的时候会遇到静态资源都加载失败的情况；</strong></li>
<li>把项目的pages功能开启，默认使用master分支；</li>
</ul>
<h3 id="step2、修改修改hexo配置"><a href="#step2、修改修改hexo配置" class="headerlink" title="step2、修改修改hexo配置"></a>step2、修改修改hexo配置</h3><ul>
<li><p>打开博客根目录的_config.yml文件，找到：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="comment">#url: http://hillychen.github.io</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/HillyChen/HillyChen.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>修改为(根据自己的仓库地址修改,其中增加了开源中国仓库地址和码云的仓库地址)：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: https://git.oschina.net/chenxushan/chenxushan.git</div><div class="line"><span class="comment">#url: http://hillychen.github.io</span></div><div class="line"><span class="comment">#url: https://git.coding.net/hilly/hilly.git</span></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  <span class="comment">#repo: https://github.com/HillyChen/HillyChen.github.io</span></div><div class="line">  repo: https://git.oschina.net/chenxushan/chenxushan.git</div><div class="line">  <span class="comment">#repo: https://git.coding.net/hilly/hilly.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>然后执行下面命令，以重新生成baidusitemap.xml。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天突然发现github.io的pags服务挂掉了,导致博客登录不上，为了防止以后类似情况的发生，决定把博客部署到国内的一些托管平台，比如开源中国和码市。因为二者都支持项目开启pages服务，所以迁移起来很简单;&lt;/p&gt;
&lt;h3 id=&quot;step1、新建项目仓&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="博客迁移" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
    
      <category term="博客迁移" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>计算机专业基础知识</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/07/计算机专业基础知识/</id>
    <published>2017-04-07T15:12:31.000Z</published>
    <updated>2017-04-09T07:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多软件开发人员在工作中都不涉及这些知识，但是对于大公司来说，要想深入技术领域产品的研发，这些知识是很重要的，所以对于打算一直走技术路线的人来说，职业生涯很有必要抽出时间进行学习。八个字：“巩固、充实、深入、探索”。下面是整理的一些思维导图。</p>
<h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><ul>
<li>计算机系统概述<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feeiqrjx0wj23g21dxnp4.jpg" alt="计算机系统概述"></li>
<li>存储器<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegg902y1gj23cf1udhdt.jpg" alt="存储器"></li>
<li>指令系统<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegga42amrj21zz2g4e81.jpg" alt="指令系统"></li>
<li>中央处理器<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggayzwbcj23q12md1kz.jpg" alt="中央处理器"></li>
<li>总线<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggbojz1qj21b51hlww2.jpg" alt="总线"></li>
<li>输入输出系统<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggckiixoj22v62dv7wh.jpg" alt="输入输出系统"></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggeide24j23cj1t3x6p.jpg" alt="进程管理"></li>
<li>处理机调度(CPU)<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggf9xs9aj229l2577wh.jpg" alt="处理机调度"></li>
<li>进程同步与互斥<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggg721b4j21sn1fek94.jpg" alt="进程同步与互斥"></li>
<li>死锁<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegggvbin4j21f71gwk8d.jpg" alt="死锁"></li>
<li>内存管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fegghifc5oj220a375u0x.jpg" alt="内存管理"></li>
<li>文件管理<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1feggi6c319j22ik3r2x6p.jpg" alt="文件管理"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从事IT行业的人，可能有一部分人不是科班出身，或者即使是科班出身，可能对计算机的一些基础理论知识掌握的不是很牢靠，目前国内的计算机学院的专业课程中最重要的就是这四门：计算机组成、操作系统、数据结构、计算机网络。这四门也是目前计算机考研所涉及的，很重要，也很基础，虽然现在很多
    
    </summary>
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>设计师和程序员必备：全世界最著名的 icons 网站</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/04/05/%E8%AE%BE%E8%AE%A1%E5%B8%88%E5%92%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%EF%BC%9A%E5%85%A8%E4%B8%96%E7%95%8C%E6%9C%80%E8%91%97%E5%90%8D%E7%9A%84-icons-%E7%BD%91%E7%AB%99/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/04/05/设计师和程序员必备：全世界最著名的-icons-网站/</id>
    <published>2017-04-05T15:05:33.000Z</published>
    <updated>2017-07-01T15:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于网页开发者或者是设计师，素材收集是很重要的一个环节，特别是对于我这种有强迫症的人，做任何工作，都会提前收集很多的素材，对于一些<br>图标、图片、色彩等的设计往往会占据很多时间，所以好的素材网站或者积累是很重要的，下面就是全球一些著名的icons网站，以后会更新设计相关的其他网站收集，比如色彩；</p>
<h2 id="全世界最著名的-icons-网站"><a href="#全世界最著名的-icons-网站" class="headerlink" title="全世界最著名的 icons 网站"></a>全世界最著名的 icons 网站</h2><ul>
<li><a href="https://icons8.com" target="_blank" rel="external">icons8</a>:拥有 42,800 个免费图标，提供各个平台的基础图标与分类图标，其特色是大小和颜色随意自定义。</li>
<li><a href="https://www.iconfinder.com" target="_blank" rel="external">iconfinder</a>:哥本哈根一个团队做的 icon 专业图标网站，拥有 1563889 个图标和37058图标集，是最专业的 icon 图标网站之一。</li>
<li><a href="http://iconfont.cn" target="_blank" rel="external">iconfont</a>:国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能，是阿里妈妈 MUX 组业余时间做的的矢量图标管理、交流平台。</li>
<li><a href="http://thenounproject.com" target="_blank" rel="external">Noun Project</a>:国外三位设计师 2010 创建一个收录、并可免费使用高清符号图示的媒体库，包含25个语言版本，每天都有来自世界各地的设计师提交新 icon。</li>
<li><a href="http://www.flaticon.com" target="_blank" rel="external">Flaticon</a>:搜索海量扁平化图标，让图标搜索和转换变得非常简单和快速，并提供常用格式 SVG、PSD 源文件和 PNG 下载。</li>
<li><a href="https://iconstore.co" target="_blank" rel="external">iconstore</a>:Icon Store 提供高质量的免费的/收费的图标，包括卡通风格图标，极简主义图标，扁平化设计风格图标，手绘风格图标，像素风格图标等等，也包括各种类型主题图标，比如圣诞节主题图标，情人节主题图标，天气图标，办公室图标,动物图标，美容美发图标等等。</li>
<li><a href="https://material.io/icons/" target="_blank" rel="external">Material icons</a>:Google 官方的扁平化图标手册，收集了多达10,000+图标，包括了网页，排版，音频，商务等等主题的绝大多数图标。格式包括SVG,PNG,ICON,以及字体图标，你可以在网页中轻松引用图标。</li>
<li><a href="https://www.swifticons.com" target="_blank" rel="external">swifticons</a>:覆盖 20 个大类包含 2264 个高质量图标</li>
<li><a href="http://flat-icon-design.com" target="_blank" rel="external">flat-icon-design</a>:一个日本的免费扁平化设计图示网站，总数量大约有 500 个左右！网站提供的图示风格设计都很简约、可爱，非常适合使用于网页设计、应用程序开发或投影片报告，而且这些图示明确标示为「可以作为商业用途」，网站开放 Illustrator AI、EPS、JPEG、PNG 和 SVG 五种格式下载。</li>
<li><a href="http://fontawesome.io" target="_blank" rel="external">Font-Awesome</a>:一套专门为 Twitter Boostrap 设计的图标字体库。这套图标字体集几乎囊括了网页中可能用到的所有图标，除了包括 Twitter Boostrap 的默认图标外，还有社交网络图标、Web 应用程序图标和编辑器图标等等，可以免费用于商业项目。</li>
<li><a href="">sketch</a>:sketch 设计素材<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2></li>
<li><a href="https://clipboardjs.com/#example-action" target="_blank" rel="external">clipboardjs</a></li>
<li><a href="http://caniuse.com/" target="_blank" rel="external">caniuse</a></li>
<li><a href="http://overapi.com/" target="_blank" rel="external">overapi</a></li>
<li><a href="http://www.imooc.com/article/2880" target="_blank" rel="external">imooc</a></li>
<li><a href="https://modernizr.com/" target="_blank" rel="external">modernizr</a></li>
<li><a href="https://960.gs/" target="_blank" rel="external">960Grid</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于网页开发者或者是设计师，素材收集是很重要的一个环节，特别是对于我这种有强迫症的人，做任何工作，都会提前收集很多的素材，对于一些&lt;br&gt;图标、图片、色彩等的设计往往会占据很多时间，所以好的素材网站或者积累是很重要的，下面就是全球一些著名的icons网站，以后会更新设计相关
    
    </summary>
    
      <category term="UI" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/UI/"/>
    
    
      <category term="UI" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>学习vue.js实现的一个小demo</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/%E5%AD%A6%E4%B9%A0vue-js%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8Fdemo/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/学习vue-js实现的一个小demo/</id>
    <published>2017-03-18T14:18:13.000Z</published>
    <updated>2017-03-18T14:25:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习vue.js最好的方法，当然首要就是<a href="https://cn.vuejs.org" target="_blank" rel="external">vue官方文档</a>，作为一个由中国开发者开发的一个前端框架，目前github上的start数量已经四千多，所以还是比较强悍的，我在学习的时候，边看文档，便去实现一个特定场景的功能，就是对一个表格数据进行增、删、改、查、搜索;鄙人水平有限，仅供入门者交流学习，望大神别吐槽！哈哈！<br><a href="http://hillychen.github.io/vue/html/admin.html" target="_blank" rel="external">demo,点击预览</a></p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><h4 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h4><h4 id="vue-js在本demo的核心代码实现"><a href="#vue-js在本demo的核心代码实现" class="headerlink" title="vue.js在本demo的核心代码实现"></a>vue.js在本demo的核心代码实现</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习vue.js最好的方法，当然首要就是&lt;a href=&quot;https://cn.vuejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue官方文档&lt;/a&gt;，作为一个由中国开发者开发的一个前端框架，目前github上的start数量已经四千多，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/PHP%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/18/PHP学习总结/</id>
    <published>2017-03-18T10:40:32.000Z</published>
    <updated>2017-03-19T15:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。</p>
<h2 id="PHP中的常用函数"><a href="#PHP中的常用函数" class="headerlink" title="PHP中的常用函数"></a>PHP中的常用函数</h2><blockquote>
<p>其实学习PHP或者Python，最终要的一点就是要熟悉一些常用库或者函数，这样在应用的时候才能游刃有余，下面总结一下常用的函数<br>查看数据类型</p>
<ul>
<li>gettype(传入一个变量) 能够获得变量的类型</li>
<li>var_dump(传入一个变量) 输出变类型和值<br>判断数据类型</li>
<li>is_int/bool/float/string/array/object/null/resource(资源)/scalar(标量)/numeric(是否为数值类型)/callable(是否为函数)<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$float = <span class="number">88.8</span>;</div><div class="line">$type = gettype($float);</div><div class="line">var_dump($float);</div><div class="line"><span class="keyword">echo</span> $type;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><blockquote>
<p>强制类型转换有三种方式：</p>
<ul>
<li>用后面的三个函数可以完成类型转换，intval()、floatval()、strval()</li>
<li>变量前加上()里面写上类型，将它转换后赋值给其他变量</li>
<li>settype(变量，类型) 直接改变量本身</li>
</ul>
</blockquote>
<h2 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h2><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><blockquote>
<p>定义 define(常量名，常量值)；defined()函数来做安全机制<br>系统的一些常量：</p>
<table>
<thead>
<tr>
<th style="text-align:left">常量明</th>
<th style="text-align:left">说明</th>
<th>常量明</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LINE</td>
<td style="text-align:left">当前所在的行</td>
<td>FILE</td>
<td style="text-align:left">当前文件在服务器的路径</td>
</tr>
<tr>
<td style="text-align:left">FUNCTIOIN</td>
<td style="text-align:left">当前函数名</td>
<td>CLASS</td>
<td style="text-align:left">当前类名</td>
</tr>
<tr>
<td style="text-align:left">METHOD</td>
<td style="text-align:left">当前成员方法名</td>
<td>PHP_OS</td>
<td style="text-align:left">PHP运行的操作系统</td>
</tr>
<tr>
<td style="text-align:left">PHP_VERSION</td>
<td style="text-align:left">当前PHP的版本</td>
<td>TRAIT</td>
<td style="text-align:left">Trait 的名字,php5.4新加</td>
</tr>
<tr>
<td style="text-align:left">DIR</td>
<td style="text-align:left">文件所在的目录</td>
<td>NAMESPACE</td>
<td style="text-align:left">当前命名空间的名称（区分大小写</td>
</tr>
</tbody>
</table>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'MY_NAME'</span>,<span class="string">'PHP'</span>);</div><div class="line"><span class="keyword">echo</span> MY_NAME;</div><div class="line"><span class="comment">//下面是错误的调用方式</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'我的名字是MY_NAME'</span>;</div><div class="line"><span class="comment">//正确的调用方式该这么写</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'我的名字是'</span> . MY_NAME;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote>
<ul>
<li><p>变变量其实就是——已声明的变量前，再上变量符</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$shu = <span class="string">'biao'</span>;</div><div class="line">$biao = <span class="string">'wo'</span>;</div><div class="line">$wo = <span class="string">'test'</span>;</div><div class="line">$test = <span class="string">'sina'</span>;</div><div class="line">$sina = <span class="string">'zhongguo'</span>;</div><div class="line">$zhongguo = <span class="string">'china'</span>;</div><div class="line">$china = <span class="string">'我爱你'</span>;</div><div class="line"><span class="comment">//别运行，自己去推理一下代码。也写几个可变变量玩玩吧！</span></div><div class="line"><span class="keyword">echo</span> $$$$$shu;(输出是zhongguo)</div></pre></td></tr></table></figure>
</li>
<li><p>PHP的外部变量是PHP 在使用过程中规定好的一些变量:<br>应有场景：<br>user.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"reg.php"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>reg.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$_GET后面加上中括号，将username作为字符串放在中括号里面，就得到了表单里面的&lt;input type="text" name="username" /&gt; 的值</span></div><div class="line">$u = $_GET[<span class="string">'username'</span>];</div><div class="line">$u = $_POST[<span class="string">'username'</span>];</div><div class="line"><span class="keyword">echo</span> $u.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">//$_GET['pwd'] 得到表单&lt;input type="password" name="pwd" /&gt; 的值</span></div><div class="line">$passwd = $_GET[<span class="string">'pwd'</span>];</div><div class="line"><span class="keyword">echo</span> $passwd.<span class="string">'&lt;br /&gt;'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">全局变量名</th>
<th style="text-align:left">功能说明</th>
<th style="text-align:left">全局变量名</th>
<th style="text-align:left">功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$_COOKIE</td>
<td style="text-align:left">得到会话控制中cookie传值</td>
<td style="text-align:left">$_SESSION</td>
<td style="text-align:left">得到会话控制中session的值</td>
</tr>
<tr>
<td style="text-align:left">$_FILES</td>
<td style="text-align:left">得到文件上传的结果</td>
<td style="text-align:left">$_GET</td>
<td style="text-align:left">得到get传值的结果</td>
</tr>
<tr>
<td style="text-align:left">$_POST</td>
<td style="text-align:left">得到post传值的结果</td>
<td style="text-align:left">$_REQUEST</td>
<td style="text-align:left">即能得到get的传值结果，也能得到post传值的结果</td>
</tr>
</tbody>
</table>
<ul>
<li>一些常用的环境变量的键名和值对应的意思：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">键名</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_METHOD”]</td>
<td style="text-align:left">请求当前PHP页面的方法</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_URI”]</td>
<td style="text-align:left">请求的URI</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SERVER_SOFTWARE”]</td>
<td style="text-align:left">用的是哪一种服务器</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REMOTE_ADDR”]</td>
<td style="text-align:left">客户的IP地址</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SERVER_ADDR”]</td>
<td style="text-align:left">当前服务器的IP地址</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“SCRIPT_FILENAME”]</td>
<td style="text-align:left">当前请求文件的路径</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“HTTP_USER_AGENT”]</td>
<td style="text-align:left">当前访问这个网址的电脑和浏览器的情况</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“HTTP_REFERER”]</td>
<td style="text-align:left">上级来源（用户从哪个地址进入当前网页的）</td>
</tr>
<tr>
<td style="text-align:left">$_SERVER[“REQUEST_TIME”]</td>
<td style="text-align:left">当前请求时间</td>
</tr>
</tbody>
</table>
<ul>
<li>变量引用(类似于C语言指正)<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$fo = <span class="number">5</span>;</div><div class="line"><span class="comment">//注意，加上了一个&amp;符哟</span></div><div class="line">$bar = &amp;$fo;</div><div class="line">$bar = <span class="number">6</span>;</div><div class="line"><span class="comment">//$bar的结果为6</span></div><div class="line"><span class="keyword">echo</span> $bar.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line"><span class="comment">//$fo的结果为6</span></div><div class="line"><span class="keyword">echo</span> $fo.<span class="string">'&lt;br /&gt;'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$x? 真代码段:假代码段</td>
<td style="text-align:left">判断是否为真假 ? 真情况 : 假情况;</td>
</tr>
<tr>
<td style="text-align:left">``（反引号）</td>
<td style="text-align:left">反引号中间插代命令，执行系统命令，等价于shell_exec函数</td>
</tr>
<tr>
<td style="text-align:left">@</td>
<td style="text-align:left">单行抑制错误，把这一行的错误不让它显示出来了，效率低不建议使用</td>
</tr>
<tr>
<td style="text-align:left">=&gt;</td>
<td style="text-align:left">数组下标访问符</td>
</tr>
<tr>
<td style="text-align:left">-&gt;</td>
<td style="text-align:left">对象访问符</td>
</tr>
<tr>
<td style="text-align:left">instanceof</td>
<td style="text-align:left">判断某个对象是否来自某个类，如果是的返回true，如果不是返回false</td>
</tr>
</tbody>
</table>
</blockquote>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">woziji</span><span class="params">($one,$two,$func)</span></span>&#123;</div><div class="line">        <span class="comment">//我规定：检查$func是否是函数，如果不是函数停止执行本段代码，返回false</span></div><div class="line">        <span class="keyword">if</span>(!is_callable($func))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//我把$one、$two相加，再把$one和$two传入$func这个函数中处理一次</span></div><div class="line">        <span class="comment">//$func是一个变量函数，参见变量函数这一章</span></div><div class="line">        <span class="keyword">echo</span> $one + $two + $func($one,$two);</div><div class="line">&#125;</div><div class="line"><span class="comment">//我们定义几个函数试试</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusx2</span><span class="params">( $foo , $bar)</span></span>&#123;</div><div class="line">        $result = ($foo+$bar)*<span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jian</span><span class="params">( $x , $y )</span></span>&#123;</div><div class="line">    $result = $x - $y;</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用一下函数，woziji，向里面传入参数试试</span></div><div class="line"><span class="keyword">echo</span> woziji(<span class="number">20</span>,<span class="number">10</span>,<span class="string">'plusx2'</span>);</div><div class="line"><span class="comment">//将plusx2改成jian试试结果</span></div><div class="line"><span class="keyword">echo</span> woziji(<span class="number">20</span>,<span class="number">10</span>,<span class="string">'jian'</span>);</div></pre></td></tr></table></figure>
<h3 id="变量函数"><a href="#变量函数" class="headerlink" title="变量函数"></a>变量函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">'天王盖地虎'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'小鸡炖蘑菇'</span>;</div><div class="line">&#125;</div><div class="line">$fu = <span class="string">'demo'</span>;</div><div class="line"><span class="comment">//把$fu变为了demo,把demo后加上了一个括号，就执行函数了</span></div><div class="line">$fu();</div><div class="line"><span class="comment">//把$fu的值改为test字符串再试试？</span></div></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.变量函数式的匿名函数</span></div><div class="line">$greet = <span class="function"><span class="keyword">function</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> $name.<span class="string">'，你好'</span>;</div><div class="line">&#125;;</div><div class="line">$greet(<span class="string">'明天'</span>);</div><div class="line">$greet(<span class="string">'PHP学院'</span>);</div><div class="line"><span class="comment">//2.回调式的匿名函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">woziji</span><span class="params">($one,$two,$func)</span></span>&#123;</div><div class="line">        <span class="comment">//我规定：检查$func是否是函数，如果不是函数停止执行本段代码，返回false</span></div><div class="line">        <span class="keyword">if</span>(!is_callable($func))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//我把$one、$two相加，再把$one和$two传入$func这个函数中处理一次</span></div><div class="line">        <span class="comment">//$func是一个变量函数，参见变量函数这一章</span></div><div class="line">        <span class="keyword">echo</span> $one + $two + $func($one,$two);</div><div class="line"></div><div class="line">&#125;</div><div class="line">woziji(<span class="number">20</span>,<span class="number">30</span>,<span class="function"><span class="keyword">function</span><span class="params">( $foo , $bar)</span></span>&#123;</div><div class="line">                $result = ($foo+$bar)*<span class="number">2</span>;</div><div class="line">                <span class="keyword">return</span> $result;</div><div class="line">            &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'我是函数foo哟，调一下我才会执行定义函数bar的过程&lt;br /&gt;'</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">       <span class="keyword">echo</span> <span class="string">'在foo函数内部有个函数叫bar函数&lt;br /&gt;'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//现在还不能调用bar()函数，因为它还不存在</span></div><div class="line">bar();</div><div class="line">foo();</div><div class="line"><span class="comment">//现在可以调用bar()函数了，因为foo()函数的执行使得bar()函数变为已定义的函数</span></div><div class="line">bar();</div><div class="line"><span class="comment">//再调一次foo()看看是不是会报错？</span></div><div class="line">foo();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><blockquote>
<p>我们将函数体外的变量通过$GLOBALS拿到了函数体使用。所以，打破了函数外的变量不能在函数体内使用的限定。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$one = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</div><div class="line">    $two = <span class="number">100</span>;</div><div class="line">    $result = $two + $GLOBALS[<span class="string">'one'</span>];</div><div class="line">    <span class="keyword">return</span> $result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//你会发现结果变成了110</span></div><div class="line"><span class="keyword">echo</span> demo();</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="使用内置函数"><a href="#使用内置函数" class="headerlink" title="使用内置函数"></a>使用内置函数</h2><blockquote>
<p>主要掌握如何使用内置函数，就是会看<a href="http://php.net/manual/en/" target="_blank" rel="external">PHP官方文档</a><br>使用函数的重点是三块：</p>
<ul>
<li>了解函数的功能，特别是常用函数的功能</li>
<li>了解函数的参数</li>
<li>了解函数的返回值<br>针对上面的三块，讲解6个函数，这6个函数，概况了函数的基本用法的全部注意事项：</li>
<li>直接返回布尔型，如bool copy ()</li>
<li>带有MIXED参数的函数如何调用。Mixed表示任何类型的数据。如Array_unshift()</li>
<li>参数中带有&amp;符的参数，一定要传一个变量做为参数。函数里面改变了他的值。</li>
<li>带有[]的参数，表示可选项。</li>
<li>带有…的参数，表示可以传任意多个参数。</li>
<li>带有callback的参数，表示回调函数。需要传一个函数进来。Array_map()</li>
<li>函数支持的版本你要了解</li>
</ul>
</blockquote>
<h5 id="1-bool-copy-string-source-string-dest-resource-context"><a href="#1-bool-copy-string-source-string-dest-resource-context" class="headerlink" title="1.bool copy ( string $source , string $dest [, resource $context ])"></a>1.bool copy ( string $source , string $dest [, resource $context ])</h5><blockquote>
<p>这个函数的功能为： 拷备一个文件<br>返回值为为： bool型值，就是成功返回true，失败返回false<br>参数为： 两个字符串的值，一个是copy的源文件，一个为目标文件。第三个参数可选的，不常用，我们不管它。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$file = <span class="string">'example.txt'</span>;</div><div class="line">$newfile = <span class="string">'example.txt.bak'</span>;</div><div class="line"><span class="keyword">if</span> (!copy($file, $newfile)) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"failed to copy $file...\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="2-int-array-unshift-array-amp-array-mixed-value1-mixed-…"><a href="#2-int-array-unshift-array-amp-array-mixed-value1-mixed-…" class="headerlink" title="2.int array_unshift ( array &amp;$array , mixed $value1 [, mixed $… ] )"></a>2.int array_unshift ( array &amp;$array , mixed $value1 [, mixed $… ] )</h5><blockquote>
<p>Mixed表示任何类型的数据。<br>功能： 操作一个数组，向数组中之前插入其他类型的参数。<br>返回值： int 类型，可能就是插入成功最后的个数<br>参数： 第一个参数为&amp;符，也就是在操作的过程中，改变了第一个参数的值。引用传参。也就是操作这个数组，向这个数组中传入参数。会直接改变这个数组的值。第二个参数为mixed，因为数组可以存入多个不同的类型.mixed是指混合的意思。因此，mixed是指可传入任意类型。第三个数数加了中括号，我们所有遇到中括号的。都是指后面的参数可传，也可以不传。第四，最后还看到了三个…(省略号)。代表可以传入任意多个参数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$queue = <span class="keyword">array</span>(<span class="string">"orange"</span>, <span class="string">"banana"</span>);</div><div class="line">array_unshift($queue, <span class="string">"apple"</span>, <span class="string">"raspberry"</span>);</div><div class="line">print_r($queue);</div><div class="line"><span class="comment">// The above example will output:</span></div><div class="line"><span class="comment">// Array</span></div><div class="line"><span class="comment">// (</span></div><div class="line"><span class="comment">//     [0] =&gt; apple</span></div><div class="line"><span class="comment">//     [1] =&gt; raspberry</span></div><div class="line"><span class="comment">//     [2] =&gt; orange</span></div><div class="line"><span class="comment">//     [3] =&gt; banana</span></div><div class="line"><span class="comment">// )</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="3、bool-array-walk-array-amp-array-callable-callback-mixed-userdata-NULL"><a href="#3、bool-array-walk-array-amp-array-callable-callback-mixed-userdata-NULL" class="headerlink" title="3、bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )"></a>3、bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )</h5><p>功能：传入一个回调函数，将数组的原来的组操作，并且发生变化。<br>返回值：bool 值 也就是意味着，提示成功或者失败<br>参数：第一个参数是要操作的数组。第二个参数是callback 代表着可以传入函数或者匿名函数。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$fruits = <span class="keyword">array</span>(<span class="string">"d"</span> =&gt; <span class="string">"lemon"</span>, <span class="string">"a"</span> =&gt; <span class="string">"orange"</span>, <span class="string">"b"</span> =&gt; <span class="string">"banana"</span>, <span class="string">"c"</span> =&gt; <span class="string">"apple"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_alter</span><span class="params">(&amp;$item1, $key, $prefix)</span></span></div><div class="line">&#123;</div><div class="line">    $item1 = <span class="string">"$prefix: $item1"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_print</span><span class="params">($item2, $key)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"$key. $item2&lt;br /&gt;\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Before ...:\n"</span>;</div><div class="line">array_walk($fruits, <span class="string">'test_print'</span>);</div><div class="line">array_walk($fruits, <span class="string">'test_alter'</span>, <span class="string">'fruit'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"... and after:\n"</span>;</div><div class="line">array_walk($fruits, <span class="string">'test_print'</span>);</div><div class="line"><span class="comment">// The above example will output:</span></div><div class="line"><span class="comment">// Before ...:</span></div><div class="line"><span class="comment">// d. lemon</span></div><div class="line"><span class="comment">// a. orange</span></div><div class="line"><span class="comment">// b. banana</span></div><div class="line"><span class="comment">// c. apple</span></div><div class="line"><span class="comment">// ... and after:</span></div><div class="line"><span class="comment">// d. fruit: lemon</span></div><div class="line"><span class="comment">// a. fruit: orange</span></div><div class="line"><span class="comment">// b. fruit: banana</span></div><div class="line"><span class="comment">// c. fruit: apple</span></div></pre></td></tr></table></figure></p>
<h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">包含失败</th>
<th style="text-align:left">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Inlcude</td>
<td style="text-align:left">返回一条警告</td>
<td style="text-align:left">文件继续向下执行。通常用于动态包含</td>
</tr>
<tr>
<td style="text-align:left">Require</td>
<td style="text-align:left">一个致命的错</td>
<td style="text-align:left">代码就不会继续向下执行。通常包含极为重要的文件，整个代码甭想执行</td>
</tr>
<tr>
<td style="text-align:left">Include_once</td>
<td style="text-align:left">返回一条警告</td>
<td style="text-align:left">除了原有include的功能以外，它还会做once检测，如果文件曾经已经被被包含过，不再包含</td>
</tr>
<tr>
<td style="text-align:left">Require_once</td>
<td style="text-align:left">一个致命的错</td>
<td style="text-align:left">除了原的功能一外，会做一次once检测，防止文件反复被包含</td>
</tr>
</tbody>
</table>
<h2 id="日期常用函数"><a href="#日期常用函数" class="headerlink" title="日期常用函数"></a>日期常用函数</h2><blockquote>
<p>在正式学习日期函数前大家要了解几个概念:</p>
<ul>
<li>时区:1884年在华盛顿召开国际经度会议时，为了克服时间上的混乱，规定将全球划分为24个时区。在中国采用首都北京所在地东八区的时间为全国统一使用时间。</li>
<li>世界时:如果对国际上某一重大事情，用地方时间来记录，就会感到复杂不便．而且将来日子一长容易搞错。因此，天文学家就提出一个大家都能接受且又方便的记录方法，那就是以格林尼治（英国某地区）的地方时间为标准。</li>
<li>unix时间戳:从Unix纪元（1970 年 1月1日零时）开始到一个时间经过的秒数。<br>时间函数有：</li>
<li>设置时区：<ul>
<li>date_default_timezone_get()</li>
<li>date_default_timezone_set()<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一下时区常量，以后你可以放到配置文件里</span></div><div class="line">define(<span class="string">'TIME_ZONE'</span>,<span class="string">'Asia/shanghai'</span>);</div><div class="line"><span class="comment">//执行函数</span></div><div class="line">date_default_timezone_set(TIME_ZONE);</div><div class="line"><span class="keyword">echo</span> date_default_timezone_get ();</div><div class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>time()获取当前的unix时间戳:time()获取当前的unix时间戳</li>
<li><p>getdate获取当前系统时间</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$mytime= getdate()；    </div><div class="line">print_r( $mytime)；</div><div class="line"><span class="comment">// Array</span></div><div class="line"><span class="comment">// (</span></div><div class="line"><span class="comment">//     [seconds] =&gt; 1            //秒</span></div><div class="line"><span class="comment">//     [minutes] =&gt; 10            //分钟</span></div><div class="line"><span class="comment">//     [hours] =&gt; 17            //小时</span></div><div class="line"><span class="comment">//     [mday] =&gt; 18            //日</span></div><div class="line"><span class="comment">//     [wday] =&gt; 0            //星期中的第几天</span></div><div class="line"><span class="comment">//     [mon] =&gt; 1            //月</span></div><div class="line"><span class="comment">//     [year] =&gt; 2015            //年</span></div><div class="line"><span class="comment">//     [yday] =&gt; 17            //年中的第几天</span></div><div class="line"><span class="comment">//     [weekday] =&gt; Sunday        //星期</span></div><div class="line"><span class="comment">//     [month] =&gt; January        //月份</span></div><div class="line"><span class="comment">//     [0] =&gt; 1421597401        //时间戳</span></div><div class="line"><span class="comment">// )</span></div><div class="line">$mytime = getdate();</div><div class="line"><span class="keyword">echo</span> <span class="string">"年 :"</span>.$mytime[<span class="string">'year'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"月 :"</span>.$mytime[<span class="string">'mon'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"日 :"</span>.$mytime[<span class="string">'mday'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"时 :"</span>.$mytime[<span class="string">'hours'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"分 :"</span>.$mytime[<span class="string">'minutes'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"秒 :"</span>.$mytime[<span class="string">'seconds'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"一个小时中的第几钟 :"</span>.$mytime[<span class="string">'minutes'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"这是一分钟的第几秒 :"</span>.$mytime[<span class="string">'seconds'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"星期名称 :"</span>.$mytime[<span class="string">'weekday'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"月份名称 :"</span>.$mytime[<span class="string">'month'</span>].<span class="string">"\n"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"时间戳   :"</span>.$mytime[<span class="number">0</span>].<span class="string">"\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>日期验证函数:bool checkdate ( int $month , int $day , int $year )</p>
</li>
<li>mktime()函数可以对一个日期和时间获得一个本地化时间戳:int mktime (int $hour [, int $minute [, int $second [, int $month [, int $day [. int$year [, int $.is_dstl.l } ] ] 31 )</li>
<li>将英文文本的日期时间描述解析为 Unix 时间戳:int strtotime ( string $time [, int $now = time() ] )</li>
<li>程序执行时间检测,microtime()这个函数，能够返回当前 Unix 时间戳和微秒数:mixed microtime ([ bool $get_as_float ] )</li>
</ul>
<h2 id="字符串常用函数"><a href="#字符串常用函数" class="headerlink" title="字符串常用函数"></a><a href="http://php.net/manual/zh/book.strings.php" target="_blank" rel="external">字符串常用函数</a></h2><p>声明：</p>
<blockquote>
<p>内容参考：<a href="http://www.kancloud.cn/phpxy/phpbook/33191" target="_blank" rel="external">《7天学会PHP》</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。&lt;/p&gt;
&lt;h2 id=&quot;PHP中的常用函数&quot;&gt;&lt;a href=&quot;#PHP中的常用函数&quot; class=&quot;headerlink&quot; title=&quot;PHP中的常
    
    </summary>
    
      <category term="PHP" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>算法学习01</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A001/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/算法学习01/</id>
    <published>2017-03-12T14:08:09.000Z</published>
    <updated>2017-06-02T16:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>底子薄、内心厚、精诚所至、金石为开、加油！</p>
<h2 id="数组问题"><a href="#数组问题" class="headerlink" title="数组问题"></a>数组问题</h2><h3 id="合并两个有序列-Merge-two-sorted-arrays"><a href="#合并两个有序列-Merge-two-sorted-arrays" class="headerlink" title="合并两个有序列(Merge two sorted arrays)"></a>合并两个有序列(Merge two sorted arrays)</h3><blockquote>
<p>问题描述：给两个有序的数组，然后给出算法，使得两个数组合并成一个有序数组<br>算法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C++ program to merge two sorted arrays/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">// Merge arr1[0..n1-1] and arr2[0..n2-1] into</span></div><div class="line"><span class="comment">// arr3[0..n1+n2-1]</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeArrays</span><span class="params">(<span class="keyword">int</span> arr1[], <span class="keyword">int</span> arr2[], <span class="keyword">int</span> n1,</span></span></div><div class="line">                             <span class="keyword">int</span> n2, <span class="keyword">int</span> arr3[])</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Traverse both array</span></div><div class="line">    <span class="keyword">while</span> (i&lt;n1 &amp;&amp; j &lt;n2)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Check if current element of first</span></div><div class="line">        <span class="comment">// array is smaller than current element</span></div><div class="line">        <span class="comment">// of second array. If yes, store first</span></div><div class="line">        <span class="comment">// array element and increment first array</span></div><div class="line">        <span class="comment">// index. Otherwise do same with second array</span></div><div class="line">        <span class="keyword">if</span> (arr1[i] &lt; arr2[j])</div><div class="line">            arr3[k++] = arr1[i++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            arr3[k++] = arr2[j++];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Store remaining elements of first array</span></div><div class="line">    <span class="keyword">while</span> (i &lt; n1)</div><div class="line">        arr3[k++] = arr1[i++];</div><div class="line">    <span class="comment">// Store remaining elements of second array</span></div><div class="line">    <span class="keyword">while</span> (j &lt; n2)</div><div class="line">        arr3[k++] = arr2[j++];</div><div class="line">&#125;</div><div class="line"><span class="comment">// Driver code</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> arr1[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</div><div class="line">    <span class="keyword">int</span> n1 = <span class="keyword">sizeof</span>(arr1) / <span class="keyword">sizeof</span>(arr1[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> arr2[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</div><div class="line">    <span class="keyword">int</span> n2 = <span class="keyword">sizeof</span>(arr2) / <span class="keyword">sizeof</span>(arr2[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> arr3[n1+n2];</div><div class="line">    mergeArrays(arr1, arr2, n1, n2, arr3);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Array after merging"</span> &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n1+n2; i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr3[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>分析：Time Complexity : O(n1 + n2)<br>Auxiliary Space : O(n1 + n2)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;底子薄、内心厚、精诚所至、金石为开、加油！&lt;/p&gt;
&lt;h2 id=&quot;数组问题&quot;&gt;&lt;a href=&quot;#数组问题&quot; class=&quot;headerlink&quot; title=&quot;数组问题&quot;&gt;&lt;/a&gt;数组问题&lt;/h2&gt;&lt;h3 id=&quot;合并两个有序列-Merge-two-sorted-arr
    
    </summary>
    
      <category term="algorithm" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/javascript%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/javascript学习总结/</id>
    <published>2017-03-12T14:06:51.000Z</published>
    <updated>2017-03-16T12:56:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="javascript" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Git总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Git%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Git总结/</id>
    <published>2017-03-12T14:06:27.000Z</published>
    <updated>2017-03-12T14:38:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="git" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/git/"/>
    
    
      <category term="git" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习总结</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Mysql%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Mysql学习总结/</id>
    <published>2017-03-12T14:05:44.000Z</published>
    <updated>2017-05-29T14:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<ul>
<li>MySQL 是一个关系数据库系统，支持 SQL 查询语言。</li>
<li>MySQL 可以是免费的，你不需要为它付费。</li>
<li>MySQL 系统的速度非常快，同样它的性能也是十分优良的。</li>
<li>MySQL 是一个管理简捷的数据库，它没有庞大而臃肿的可视化管理工具。</li>
</ul>
</blockquote>
<h3 id="mysql基础命令"><a href="#mysql基础命令" class="headerlink" title="mysql基础命令"></a>mysql基础命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USE</span> tablename;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">databases</span>;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">tables</span>;</div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">columns</span> <span class="keyword">from</span> tablename;<span class="comment">--返回数据表的各个列及属性</span></div><div class="line"><span class="keyword">DESCRIBE</span> tablename;<span class="comment">--等价于上一句</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">STATUS</span>;<span class="comment">--用于显示广泛的服务器状态信息;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>,<span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span><span class="comment">--分别用来显示创建特定数据库或表的MySQL语句;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>;<span class="comment">--用来显示授予用户(所有用户或特定用户)的安全权限;</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">ERRORS</span>,<span class="keyword">SHOW</span> <span class="keyword">WARNINGS</span>;<span class="comment">--用来显示服务器错误或警告消息</span></div><div class="line"><span class="comment">--进一步了解SHOW 请在mysql命令行实用程序中，执行命令 HELP SHOW;显示允许的SHOW语句。</span></div><div class="line"><span class="comment">-- 检索</span></div><div class="line"><span class="keyword">SELECT</span> colum_name <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="comment">--检索多个列</span></div><div class="line"><span class="keyword">SELECT</span> colum1,colum2,colum3 <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="comment">--检索多个列</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id <span class="keyword">FROM</span> tablename;<span class="comment">--返回不同(唯一)的vend_id行</span></div><div class="line"><span class="comment">--检索指定行</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">colum</span> <span class="keyword">FROM</span> tablename <span class="keyword">LIMIT</span> <span class="number">5</span>;<span class="comment">--LIMIT 5指示MySQL返回 不多于5行</span></div><div class="line"><span class="comment">--为得出下一个5行，可指定要检索的开始行和行数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">colum</span> <span class="keyword">FROM</span> tablename <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">5</span>;</div><div class="line"><span class="comment">--使用完全限定的表名</span></div><div class="line"><span class="keyword">SELECT</span> tablename.column <span class="keyword">FROM</span> databse.tablename;<span class="comment">--在有些场景的时候，是需要这样的，多表查询的时候;</span></div></pre></td></tr></table></figure>
<h4 id="排序数据检索"><a href="#排序数据检索" class="headerlink" title="排序数据检索"></a>排序数据检索</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>;<span class="comment">--按单列排序</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> column2,column3;</div><div class="line"><span class="comment">--指定排序方向</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">DESC</span>;<span class="comment">--降序排序</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> column2 <span class="keyword">DESC</span>,column3;<span class="comment">--默认是升序ASC</span></div><div class="line"><span class="comment">-- 使用ORDER BY 和LIMIT组合可以选出最大和最小</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> tablename <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span> <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h4 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1=<span class="keyword">value</span>;</div><div class="line"><span class="comment">-- WHERE子句的位置 在同时使用ORDERBY和WHERE子句时，应 该让ORDER BY位于WHERE之后，否则将会产生错误</span></div><div class="line"><span class="comment">-- = 等于&lt;&gt; 不等于 != 不等于 &lt; 小于 &lt;= 小于等于 &gt; 大于 &gt;= 大于等于 BETWEEN 在指定的两个值之间</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</div><div class="line"><span class="comment">-- 空值检查</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">IS</span> <span class="literal">NULL</span>;</div></pre></td></tr></table></figure>
<h4 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 为了进行更强的过滤控制，MySQL允许给出多个WHERE子句。这些子 句可以两种方式使用:以AND子句的方式或OR子句的方式使用。</span></div><div class="line"><span class="comment">-- AND操作符</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1=value1 <span class="keyword">AND</span> column3 &lt; value2;</div><div class="line"><span class="comment">-- OR操作符</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1=value1 <span class="keyword">OR</span> column3 &lt; value2;</div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> (column1 = value1 <span class="keyword">OR</span> column1 = value2) <span class="keyword">AND</span> column3 &lt; value2;<span class="comment">--不加括号的话，存在优先级选择问题，可能不会产生预期的结果</span></div><div class="line"><span class="comment">-- IN 操作符</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">IN</span> (value1,value2) <span class="keyword">ORDER</span> <span class="keyword">BY</span> column2;<span class="comment">-- 和or功能相似，但是有点就是执行更快，逻辑更清晰，可以包含其他SELECT语句，使得能够更动态地建立WHERE子句</span></div><div class="line"><span class="comment">-- NOT操作符</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">NOT</span> <span class="keyword">IN</span> (value1,value2) <span class="keyword">ORDER</span> <span class="keyword">BY</span> column2;</div></pre></td></tr></table></figure>
<h4 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a>用通配符进行过滤</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--LIKE操作符</span></div><div class="line"><span class="comment">-- 通配符(wildcard) 用来匹配值的一部分的特殊字符</span></div><div class="line"><span class="comment">--搜索模式(search pattern)由字面值、通配符或两者组合构成的搜索条件。</span></div><div class="line"><span class="comment">-- 谓词 操作符何时不是操作符?答案是在它作为谓词(predi- cate)时。从技术上说，LIKE是谓词而不是操作符。虽然最终 的结果是相同的，但应该对此术语有所了解，以免在SQL文档 中遇到此术语时不知道。</span></div><div class="line"><span class="comment">-- 百分号(%)通配符</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">LIKE</span> <span class="string">"value%"</span>;<span class="comment">--以value为开头的结果</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">LIKE</span> <span class="string">"%value%"</span>;<span class="comment">-- 所有包含value的</span></div><div class="line"><span class="comment">-- 注意NULL 虽然似乎%通配符可以匹配任何东西，但有一个例 外，即NULL。即使是WHERE prod_name LIKE '%'也不能匹配 用值NULL作为产品名的行。</span></div><div class="line"><span class="comment">-- 下划线(_)通配符</span></div><div class="line"><span class="comment">-- 另一个有用的通配符是下划线(_)。下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</span></div></pre></td></tr></table></figure>
<blockquote>
<p>正如所见，MySQL的通配符很有用。但这种功能是有代价的:通配 符搜索的处理一般要比前面讨论的其他搜索所花时间更长。这里给出一 些使用通配符要记住的技巧。</p>
<ul>
<li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符</li>
<li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起 来是最慢的</li>
<li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。总之，通配符是一种极重要和有用的搜索工具，以后我们经常会用 到它。</li>
</ul>
</blockquote>
<h4 id="用正则表达式-进行搜索"><a href="#用正则表达式-进行搜索" class="headerlink" title="用正则表达式 进行搜索"></a>用正则表达式 进行搜索</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 基本字符匹配</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 REGEXP <span class="string">'1000'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 REGEXP <span class="string">'.1000'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;<span class="comment">--这里使用了正则表达式.000。.是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符，因此，1000和2000都匹配 且返回。</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>LIKE与REGEXP</strong> 在LIKE和REGEXP之间有一个重要的差别。请 看以下两条语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 <span class="keyword">LIKE</span> <span class="string">'.1000'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 REGEXP <span class="string">'1000'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</div></pre></td></tr></table></figure></p>
<p>如果执行上述两条语句，会发现第一条语句不返回数据，而第 二条语句返回一行。为什么?<br>正如第8章所述，LIKE匹配整个列。如果被匹配的文本在列值 中出现，LIKE将不会找到它，相应的行也不被返回(除非使用 通配符)。而REGEXP在列值内进行匹配，如果被匹配的文本在 列值中出现，REGEXP将会找到它，相应的行将被返回。这是一 个非常重要的差别。<br>那么，REGEXP能不能用来匹配整个列值(从而起与LIKE相同的作用)?答案是肯定的，使用^和$定位符(anchor)即可.<br><strong>匹配不区分大小写</strong> MySQL中的正则表达式匹配(自版本 3.23.4后)不区分大小写(即，大写和小写都匹配)。为区分大 小写，可使用BINARY关键字，如WHERE prod_name REGEXP BINARY ‘JetPack .000’。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--进行OR匹配：为搜索两个串之一(或者为这个串，或者为另一个串)，使用|，如下所示</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 REGEXP <span class="string">'1000|2000'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</div><div class="line"><span class="comment">-- 匹配几个字符之一两个以上的OR条件 可以给出两个以上的OR条件。例如， '1000 | 2000 | 3000'将匹配1000或2000或3000。</span></div><div class="line"><span class="comment">--匹配几个字符之一</span></div><div class="line"><span class="keyword">SELECT</span> column1,column2,column3 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column1 REGEXP <span class="string">'[123] tom'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;<span class="comment">--1 ton和2 ton都匹配且返回</span></div><div class="line"><span class="comment">-- 字符集合也可以被否定，即，它们将匹配除指定字符外的任何东西。 为否定一个字符集，在集合的开始处放置一个^即可。因此，尽管[123] 匹配字符1、2或3，但[^123]却匹配除这些字符外的任何东西。</span></div><div class="line"><span class="comment">-- 匹配范围</span></div><div class="line"><span class="comment">-- 集合可用来定义要匹配的一个或多个字符。例如，下面的集合将匹 配数字0到9:[0123456789],为简化这种类型的集合，可使用-来定义一个范围。下面的式子功能 上等同于上述数字列表:[0-9],[a-z]匹配任意字母字符道理类似</span></div><div class="line"><span class="comment">-- 匹配特殊字符，要用\\转移，\\.，代表搜索含有.字符的</span></div></pre></td></tr></table></figure></p>
<p>匹配字符类:存在找出你自己经常使用的数字、所有字母字符或所有数字字母字 符等的匹配。为更方便工作，可以使用预定义的字符集，称为字符类(character class)。</p>
<ul>
<li>[:alnum:]:任意字母和数字(同[a-zA-Z0-9])</li>
<li>[:alpha:]: 任意字符(同[a-zA-Z])</li>
<li>[:blank:]:空格和制表(同[\t])</li>
<li>[:cntrl:]:ASCII控制字符(ASCII 0到31和127)</li>
<li>[:digit:]:任意数字(同[0-9])</li>
<li>[:graph:]:与[:print:]相同，但不包括空格</li>
<li>[:lower:]:任意小写字母(同[a-z])</li>
<li>[:print:]:任意可打印字符</li>
<li>[:punct:]:既不在[:alnum:]又不在[:cntrl:]中的任意字符</li>
<li>[:space:]:包括空格在内的任意空白字符(同[\f\n\r\t\v])</li>
<li>[:upper:]:任意大写字母(同[A-Z])</li>
<li>[:xdigit:]:任意十六进制数字(同[a-fA-F0-9])<br>匹配多个实例：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">0个或多个匹配</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">1个或多个匹配(等于{1,})</td>
</tr>
<tr>
<td style="text-align:center">？</td>
<td style="text-align:center">0个或1个匹配(等于{0,1}) {n} 指定数目的匹配</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:center">不少于指定数目的匹配</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">匹配数目的范围(m不超过255)</td>
</tr>
</tbody>
</table>
<p>举例：正则表达式\([0-9] sticks?\)：\(匹配)，[0-9]匹配任意数字(这个例子中为1和5)，sticks?匹配stick 和sticks(s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出 现)，\)匹配)。没有?，匹配stick和sticks会非常困难。<br>[[:digit:]]{4}：匹配连在一起的任意4位数字<br>定位符<br>| 元字符       | 说明          |<br>| :————-: |:————-:|<br>|^|文本的开始|<br>|$|文本的结尾|<br>|[[:&lt;:]]|词的开始|<br>|[[:&gt;:]]|词的结尾|<br>^[0-9\.]只在.或任意数字为串中第<br>一个字符时才匹配它们</p>
</blockquote>
<h4 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h4><blockquote>
<p>存储在数据库表中的数据一般不是应用程序所需要的格式。下面举<br>几个例子。</p>
<ul>
<li>如果想在一个字段中既显示公司名，又显示公司的地址，但这两 个信息一般包含在不同的表列中。</li>
<li>城市、州和邮政编码存储在不同的列中(应该这样)，但邮件标签 打印程序却需要把它们作为一个恰当格式的字段检索出来。</li>
<li>列数据是大小写混合的，但报表程序需要把所有数据按大写表示 出来。</li>
<li>物品订单表存储物品的价格和数量，但不需要存储每个物品的总 价格(用价格乘以数量即可)。为打印发票，需要物品的总价格。</li>
<li>需要根据表数据进行总数、平均数计算或其他计算。<br>在上述每个例子中，存储在表中的数据都不是应用程序所需要的。 我们需要直接从数据库中检索出转换、计算或格式化过的数据;而不是 检索出数据，然后再在客户机应用程序或报告程序中重新格式化。<br>这就是计算字段发挥作用的所在了。与前面各章介绍过的列不同， 计算字段并不实际存在于数据库表中。计算字段是运行时在SELECT语句 内创建的。<h5 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h5>为了说明如何使用计算字段，举一个创建由两列组成的标题的简单例子。vendors表包含供应商名和位置信息。假如要生成一个供应商报表， 需要在供应商的名字中按照name(location)这样的格式列出供应商的位 置。此报表需要单个值，而表中数据存储在两个列vend_name和vend_country中在MySQL的SELECT语句中，可使用Concat()函数来拼接两个列。<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- MySQL的不同之处 多数DBMS使用+或||来实现拼接， MySQL则使用Concat()函数来实现。当把SQL语句转换成 MySQL语句时一定要把这个区别铭记在心。</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>) <span class="keyword">FROM</span> vendors <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</div><div class="line"><span class="comment">-- 曾提到通过删除数据右侧多余的空格来整理数据，这可以 使用MySQL的RTrim()函数来完成</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">RTrim</span>(vend_country),<span class="string">')'</span>) <span class="keyword">FROM</span> vendors <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</div><div class="line"><span class="comment">-- 使用别名</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">Concat</span>(<span class="keyword">RTrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">RTrim</span>(vend_country),<span class="string">')'</span>) <span class="keyword">AS</span> vend_title <span class="keyword">FROM</span> vendors <span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name;</div><div class="line"><span class="comment">-- 执行算数运算</span></div><div class="line"><span class="keyword">SELECT</span> product_id,quantity,item_price,quantity*item_price <span class="keyword">AS</span> price <span class="keyword">FROM</span> ordertiems <span class="keyword">WHERE</span> order_num = <span class="number">20005</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h4><blockquote>
<p>函数:SQL支持利用函数来处理数据。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。去掉串尾空格的RTrim()就是一个函数例子。大多数SQL实现支持以下类型的函数。</p>
<ul>
<li>用于处理文本串(如删除或填充值，转换值为大写或小写)的文本函数。</li>
<li>用于在数值数据上进行算术操作(如返回绝对值，进行代数运算)的数值函数。</li>
<li>用于处理日期和时间值并从这些值中提取特定成分(例如，返回两个日期之差，检查日期有效性等)的日期和时间函数。</li>
<li>返回DBMS正使用的特殊信息(如返回用户登录信息，检查版本细节)的系统函数。</li>
</ul>
</blockquote>
<h5 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">Upper</span>(<span class="keyword">name</span>) <span class="keyword">AS</span> name_upcase <span class="keyword">FROM</span> tablename ,<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Left()</td>
<td style="text-align:left">返回串左边的字符</td>
</tr>
<tr>
<td style="text-align:left">Length()</td>
<td style="text-align:left">返回串的长度</td>
</tr>
<tr>
<td style="text-align:left">Locate()</td>
<td style="text-align:left">找出串的一个子串</td>
</tr>
<tr>
<td style="text-align:left">Lower()</td>
<td style="text-align:left">将串转换为小写</td>
</tr>
<tr>
<td style="text-align:left">LTrim()</td>
<td style="text-align:left">去掉串左边的空格</td>
</tr>
<tr>
<td style="text-align:left">Right()</td>
<td style="text-align:left">返回串右边的字符</td>
</tr>
<tr>
<td style="text-align:left">RTrim()</td>
<td style="text-align:left">去掉串右边的空格</td>
</tr>
<tr>
<td style="text-align:left">Soundex()</td>
<td style="text-align:left">返回串的SOUNDEX值</td>
</tr>
<tr>
<td style="text-align:left">SubString()</td>
<td style="text-align:left">返回子串的字符</td>
</tr>
<tr>
<td style="text-align:left">Upper()</td>
<td style="text-align:left">将串转换为大写</td>
</tr>
</tbody>
</table>
<h5 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h5><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AddDate()</td>
<td style="text-align:left">增加一个日期(天、周等)</td>
</tr>
<tr>
<td style="text-align:left">AddTime()</td>
<td style="text-align:left">增加一个时间(时、分等)</td>
</tr>
<tr>
<td style="text-align:left">CurDate()</td>
<td style="text-align:left">返回当前日期</td>
</tr>
<tr>
<td style="text-align:left">CurTime()</td>
<td style="text-align:left">返回当前时间</td>
</tr>
<tr>
<td style="text-align:left">Date()</td>
<td style="text-align:left">返回日期时间的日期部分</td>
</tr>
<tr>
<td style="text-align:left">DateDiff()</td>
<td style="text-align:left">计算两个日期之差</td>
</tr>
<tr>
<td style="text-align:left">Date_Add()</td>
<td style="text-align:left">高度灵活的日期运算函数</td>
</tr>
<tr>
<td style="text-align:left">Date_Format()</td>
<td style="text-align:left">返回一个格式化的日期或时间串</td>
</tr>
<tr>
<td style="text-align:left">Day()</td>
<td style="text-align:left">返回一个日期的天数部分</td>
</tr>
<tr>
<td style="text-align:left">DayOfWeek()</td>
<td style="text-align:left">对于一个日期，返回对应的星期几</td>
</tr>
<tr>
<td style="text-align:left">Hour()</td>
<td style="text-align:left">返回一个时间的小时部分</td>
</tr>
<tr>
<td style="text-align:left">Minute()</td>
<td style="text-align:left">返回一个时间的分钟部分</td>
</tr>
<tr>
<td style="text-align:left">Month()</td>
<td style="text-align:left">返回一个日期的月份部分</td>
</tr>
<tr>
<td style="text-align:left">Now()</td>
<td style="text-align:left">返回当前日期和时间</td>
</tr>
<tr>
<td style="text-align:left">Second()</td>
<td style="text-align:left">返回一个时间的秒部分</td>
</tr>
<tr>
<td style="text-align:left">Time()</td>
<td style="text-align:left">返回一个日期时间的时间部分</td>
</tr>
<tr>
<td style="text-align:left">Year()</td>
<td style="text-align:left">返回一个日期的年份部分</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">num</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> <span class="built_in">Date</span>(<span class="keyword">data</span>) = <span class="string">"2017-05-22"</span>;</div><div class="line"><span class="comment">--索出2017年5月下的所有项</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">num</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> <span class="built_in">Date</span>(<span class="keyword">data</span>) <span class="keyword">BETWEEN</span> <span class="string">'2017-05-01'</span> <span class="keyword">AND</span> <span class="string">'2017-05-30'</span>;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">num</span> <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> <span class="keyword">Year</span>(<span class="keyword">data</span>)=<span class="number">2017</span>  <span class="keyword">AND</span> <span class="keyword">Month</span>(<span class="built_in">date</span>)=<span class="number">9</span>;</div></pre></td></tr></table></figure>
<h5 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h5><table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Abs()</td>
<td style="text-align:left">返回一个数的绝对值</td>
</tr>
<tr>
<td style="text-align:left">Cos()</td>
<td style="text-align:left">返回一个角度的余弦</td>
</tr>
<tr>
<td style="text-align:left">Exp()</td>
<td style="text-align:left">返回一个数的指数值</td>
</tr>
<tr>
<td style="text-align:left">Mod()</td>
<td style="text-align:left">返回除操作的余数</td>
</tr>
<tr>
<td style="text-align:left">Pi()</td>
<td style="text-align:left">返回圆周率</td>
</tr>
<tr>
<td style="text-align:left">Rand()</td>
<td style="text-align:left">返回一个随机数</td>
</tr>
<tr>
<td style="text-align:left">Sin()</td>
<td style="text-align:left">返回一个角度的正弦</td>
</tr>
<tr>
<td style="text-align:left">Sqrt()</td>
<td style="text-align:left">返回一个数的平方根</td>
</tr>
<tr>
<td style="text-align:left">Tan()</td>
<td style="text-align:left">返回一个角度的正切</td>
</tr>
</tbody>
</table>
<h4 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h4><h5 id="聚集数据"><a href="#聚集数据" class="headerlink" title="聚集数据"></a>聚集数据</h5><blockquote>
<p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提 供了专门的函数。使用这些函数，MySQL查询可用于检索数据，以便分 析和报表生成。这种类型的检索例子有以下几种。</p>
<ul>
<li>确定表中行数(或者满足某个条件或包含某个特定值的行数)。</li>
<li>获得表中行组的和。</li>
<li>找出表列(或所有行或某些特定的行)的最大值、最小值和平均<br>值。<br>上述例子都需要对表中数据(而不是实际数据本身)汇总。因此， 返回实际表数据是对时间和处理资源的一种浪费(更不用说带宽了)。重 复一遍，实际想要的是汇总信息。为方便这种类型的检索，MySQL给出了5个聚集函数，见表12-1。 这些函数能进行上述罗列的检索。</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVG()</td>
<td style="text-align:left">返回某列的平均值</td>
</tr>
<tr>
<td style="text-align:left">COUNT()</td>
<td style="text-align:left">返回某列的行数</td>
</tr>
<tr>
<td style="text-align:left">MAX()</td>
<td style="text-align:left">返回某列的最大值</td>
</tr>
<tr>
<td style="text-align:left">MIN()</td>
<td style="text-align:left">返回某列的最小值</td>
</tr>
<tr>
<td style="text-align:left">SUM()</td>
<td style="text-align:left">返回某列值之和</td>
</tr>
</tbody>
</table>
<h5 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> price) <span class="keyword">AS</span> avg_price <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">30</span>;</div></pre></td></tr></table></figure>
<h5 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_items,</div><div class="line">      <span class="keyword">MIN</span>(price) <span class="keyword">AS</span> price_min,</div><div class="line">      <span class="keyword">MAX</span>(price) <span class="keyword">AS</span> price_max,</div><div class="line">      <span class="keyword">AVG</span>(price) <span class="keyword">AS</span> price_avg</div><div class="line"><span class="keyword">FROM</span> products;</div></pre></td></tr></table></figure>
<h4 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h4><blockquote>
<p>GROUP BY子句和HAVING子句，分组允许把数据分为多个逻辑组，以 便能对每个组进行聚集计算。</p>
<h5 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_product <span class="keyword">FROM</span> products <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</div></pre></td></tr></table></figure>
<p>具体使用GROUP BY子句前，需要知道一些重要的规定</p>
<ul>
<li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套， 为数据分组提供更细致的控制。</li>
<li>如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上 进行汇总。换句话说，在建立分组时，指定的所有列都一起计算<br>(所以不能从个别的列取回数据)。</li>
<li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式<br>(但不能是聚集函数)。如果在SELECT中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</li>
<li>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子 句中给出。</li>
<li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列 中有多行NULL值，它们将分为一组。</li>
<li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前</li>
</ul>
</blockquote>
<h5 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h5><blockquote>
<p>除了能用GROUP BY分组数据外，MySQL还允许过滤分组，规定包括 哪些分组，排除哪些分组。例如，可能想要列出至少有两个订单的所有 顾客。为得出这种数据，必须基于完整的分组而不是个别的行进行过滤。在这个例 子中WHERE不能完成任务，因为WHERE过滤指定的是行而不是分组。事实 上，WHERE没有分组的概念。那么，不使用WHERE使用什么呢?MySQL为此目的提供了另外的子 句，那就是HAVING子句。HAVING非常类似于WHERE。事实上，目前为止所 学过的所有类型的WHERE子句都可以用HAVING来替代。唯一的差别是 WHERE过滤行，而HAVING过滤分组。HAVING支持所有WHERE操作符 ，我们学习 了WHERE子句的条件(包括通配符条件和带多个操作符的子 句)。所学过的有关WHERE的所有这些技术和选项都适用于 HAVING。它们的句法是相同的，只是关键字有差别。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders <span class="keyword">FROM</span> oders <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p>HAVING和WHERE的差别 这里有另一种理解方法，WHERE在数据 分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重 要的区别，WHERE排除的行不包括在分组中。这可能会改变计 算值，从而影响HAVING子句中基于这些值过滤掉的分组。<br>同时使用WHERE和HAVING子句例子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> ,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price &gt;= <span class="number">10</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt; <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h5><blockquote>
<p>虽然GROUP BY和ORDER BY经常完成相同的工作，但它们是非常不同的<br>| ORDER BY  | GROUP BY      |<br>| :————- | :————- |<br>| 排序产生的输出任意列都可以使用(甚至非选择的列也可以使用)       | 分组行。但输出可能不是分组的顺序只可能使用选择列或表达式列，而且必须使用每个选择列表达式      |<br>|不一定需要|如果与聚集函数一起使用列(或表达式)，则必须使用|<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> order_num ,,<span class="keyword">SUM</span>(quantity* item_price) <span class="keyword">as</span> ordertotal <span class="keyword">FROM</span> orderitems <span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(quantity* item_price)&gt;= <span class="number">50</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> ordertotal;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><blockquote>
<p>SQL还允许创建子查询(subquery)，即嵌套在其他查询中的查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cunst_name,cust_contact <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (</div><div class="line">  <span class="keyword">SELECT</span> cust_id <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (</div><div class="line">    <span class="keyword">SELECT</span> order_num <span class="keyword">FROM</span> orderitems <span class="keyword">WHERE</span> prod_id =<span class="string">'TNT2'</span></div><div class="line">)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- 子查询当嵌套太多的时候，性能就会有问题，联结表会解决这个问题</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h4><blockquote>
<p>SQL最强大的功能之一就是能在数据检索查询的执行中联结(join) 表。联结是利用SQL的SELECT能执行的最重要的操作，很好地理解联结 及其语法是学习SQL的一个极为重要的组成部分。<br><strong>维护引用完整性</strong> 重要的是，要理解联结不是物理实体。换句 话说，它在实际的数据库表中不存在。联结由MySQL根据需 要建立，它存在于查询的执行当中。<br>在使用关系表时，仅在关系列中插入合法的数据非常重要。回<br>到这里的例子，如果在products表中插入拥有非法供应商ID (即没有在vendors表中出现)的供应商生产的产品，则这些<br>产品是不可访问的，因为它们没有关联到某个供应商。<br>为防止这种情况发生，可指示MySQL只允许在products表的 供应商ID列中出现合法值(即出现在vendors表中的供应商)。 这就是维护引用完整性，它是通过在表的定义中指定主键和外 键来实现的。</p>
</blockquote>
<h5 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_price</div><div class="line"><span class="keyword">FROM</span> vendors,products</div><div class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name,prod_name;</div></pre></td></tr></table></figure>
<h5 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a>内部联结</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name,prod_name,prod_price</div><div class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</div><div class="line"><span class="keyword">ON</span> vendors.vend_id = products.vend_id;</div></pre></td></tr></table></figure>
<h5 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a>联结多个表</h5><blockquote>
<p>SQL对一条SELECT语句中可以联结的表的数目没有限制。创建联结<br>的基本规则也相同。首先列出所有表，然后定义表之间的关系<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> prod_name,vend_name,prod_price,quantity</div><div class="line"><span class="keyword">FROM</span> orderitems,products,vendors</div><div class="line"><span class="keyword">WHERE</span> products.vend_id = vendors.vend_id</div><div class="line"> <span class="keyword">AND</span> orderitems.prod_id = products.prod_id <span class="keyword">AND</span> order_num = <span class="number">2005</span>;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h4><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="01创建一个表格"><a href="#01创建一个表格" class="headerlink" title="01创建一个表格"></a>01创建一个表格</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher</div><div class="line">(</div><div class="line"><span class="keyword">id</span> TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">tele <span class="built_in">NUMERIC</span>(<span class="number">8</span>),</div><div class="line">sex ENUM(<span class="string">"F"</span>,<span class="string">"M"</span>) <span class="keyword">DEFAULT</span> <span class="string">"M"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>由上面这个例子可以知道，创建列类型的语法是: col_name col_type [col_attributes][general_attributes]</p>
<ul>
<li>col_name 列的名字</li>
<li>col_type 列类型，控制存储在列中的数据类型</li>
<li>col_attributes 专用属性，只能应用于制定列，例如，我们还不知道的 BINARY。 如果你使用专用属性，必须在列的类型之后，列的通用属性之前。</li>
<li>general_attributes 通用属性，可以应用在出少数列的任意列，例如上面提到了 NULL、 NOT NULL、和 DEFAULT。</li>
<li>MySQL 的数字列类型<br><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fdp6efjbxmj20qm0k841v.jpg" alt=""><img src="http://ww1.sinaimg.cn/large/af1cab2fgy1fdp7523ke3j20sg0o60x7.jpg" alt=""></li>
</ul>
<p>####</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识在乎不断的积累和总结，好记性不如烂笔头.读各种书，以博客以记之，为了自己日后学习查阅，也可以和远方来的朋友分享交流。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;bloc
    
    </summary>
    
      <category term="Mysql" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>java学习</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Java/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/Java/</id>
    <published>2017-03-12T10:00:35.000Z</published>
    <updated>2017-03-12T14:10:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="https://git.oschina.net/chenxushan/chenxushan.git/categories/java/"/>
    
    
      <category term="java" scheme="https://git.oschina.net/chenxushan/chenxushan.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/hello-world/"/>
    <id>https://git.oschina.net/chenxushan/chenxushan.git/2017/03/12/hello-world/</id>
    <published>2017-03-12T06:13:43.000Z</published>
    <updated>2017-03-12T06:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
